{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SUPER PC\\\\Desktop\\\\weather-app\\\\weather-app\\\\src\\\\scripts\\\\WeatherAPI.js\";\nimport React from \"react\";\nimport Axios from \"axios\";\nimport Chart from \"chart.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction WeatherAPI(cityName, units) {\n  const API_LINK = \"https://api.openweathermap.org/data/2.5/weather?q=\";\n  const API_CITY = cityName || \"Gdańsk\";\n  const API_KEY = \"&appid=27e27f3b62720afb770645ec7ae89aa7\";\n  const API_UNITS = units === false ? \"&units=metric\" : \"&units=imperial\";\n  const API_LANG = \"&lang=pl\";\n  const API_URL = API_LINK + API_CITY + API_UNITS + API_KEY;\n  // const API_URL =\n  //   \"https://api.openweathermap.org/data/2.5/weather?q=Gorz%C3%B3w%20Wielkopolski&units=imperial&lang=pl&appid=27e27f3b62720afb770645ec7ae89aa7\";\n\n  // Axios.get(API_URL).then((res) => {\n  //   console.log(res.data);\n\n  // });\n  const API_URL2 = `${API_LINK}?key=${API_KEY}&q=${API_CITY}&days=1&aqi=no&alerts=no&hour=24`;\n  Axios.get(API_URL2).then(res => {\n    console.log(res.data);\n    const data = res.data;\n    const hourlyForecast = data.forecast.forecastday[0].hour.map(item => ({\n      time: item.time,\n      // Czas\n      temperature: item.temp_c // Temperatura w stopniach Celsiusza\n      // Dodaj inne niezbędne informacje\n    }));\n  }).catch(error => {\n    console.error(\"Błąd pobierania prognozy pogody:\", error);\n  });\n  console.log(units);\n  console.log(API_URL2);\n  // async function getData() {\n  //   const response = await fetch(API_URL);\n  //   const data = await response.json();\n  //   setResponse(data);\n  //   console.log(data);\n  // }\n  // getData();\n\n  // fetch(API_URL, {\n  //   method: \"GET\",\n  //   headers: {\n  //     \"Content-Type\": \"application/json\",\n  //   },\n  // })\n  //   .then((res) => {\n  //     if (res.ok) {\n  //       console.log(res);\n  //     } else {\n  //       console.log(\"Mamy problem !\");\n  //     }\n  //   })\n  //   .catch((error) => {\n  //     console.error(error);\n  //   });\n\n  const generateChart = () => {\n    const labels = hourlyData.map(item => item.time);\n    const temperatures = hourlyData.map(item => item.temperature);\n    const ctx = document.getElementById(\"weatherChart\").getContext(\"2d\");\n    new Chart(ctx, {\n      type: \"line\",\n      data: {\n        labels: labels,\n        datasets: [{\n          label: \"Temperatura (°C)\",\n          data: temperatures,\n          borderColor: \"blue\",\n          backgroundColor: \"rgba(0, 0, 255, 0.2)\",\n          fill: true\n        }]\n      },\n      options: {\n        responsive: true,\n        scales: {\n          y: {\n            beginAtZero: true\n          }\n        }\n      }\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    id: \"weatherChart\",\n    width: \"400\",\n    height: \"200\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 10\n  }, this);\n}\n_c = WeatherAPI;\nexport default WeatherAPI;\nvar _c;\n$RefreshReg$(_c, \"WeatherAPI\");","map":{"version":3,"names":["React","Axios","Chart","jsxDEV","_jsxDEV","WeatherAPI","cityName","units","API_LINK","API_CITY","API_KEY","API_UNITS","API_LANG","API_URL","API_URL2","get","then","res","console","log","data","hourlyForecast","forecast","forecastday","hour","map","item","time","temperature","temp_c","catch","error","generateChart","labels","hourlyData","temperatures","ctx","document","getElementById","getContext","type","datasets","label","borderColor","backgroundColor","fill","options","responsive","scales","y","beginAtZero","id","width","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/SUPER PC/Desktop/weather-app/weather-app/src/scripts/WeatherAPI.js"],"sourcesContent":["import React from \"react\";\r\nimport Axios from \"axios\";\r\nimport Chart from \"chart.js\";\r\nfunction WeatherAPI(cityName, units) {\r\n  const API_LINK = \"https://api.openweathermap.org/data/2.5/weather?q=\";\r\n  const API_CITY = cityName || \"Gdańsk\";\r\n  const API_KEY = \"&appid=27e27f3b62720afb770645ec7ae89aa7\";\r\n  const API_UNITS = units === false ? \"&units=metric\" : \"&units=imperial\";\r\n  const API_LANG = \"&lang=pl\";\r\n\r\n  const API_URL = API_LINK + API_CITY + API_UNITS + API_KEY;\r\n  // const API_URL =\r\n  //   \"https://api.openweathermap.org/data/2.5/weather?q=Gorz%C3%B3w%20Wielkopolski&units=imperial&lang=pl&appid=27e27f3b62720afb770645ec7ae89aa7\";\r\n\r\n  // Axios.get(API_URL).then((res) => {\r\n  //   console.log(res.data);\r\n\r\n  // });\r\n  const API_URL2 = `${API_LINK}?key=${API_KEY}&q=${API_CITY}&days=1&aqi=no&alerts=no&hour=24`;\r\n  Axios.get(API_URL2)\r\n    .then((res) => {\r\n      console.log(res.data);\r\n      const data = res.data;\r\n      const hourlyForecast = data.forecast.forecastday[0].hour.map((item) => ({\r\n        time: item.time, // Czas\r\n        temperature: item.temp_c, // Temperatura w stopniach Celsiusza\r\n        // Dodaj inne niezbędne informacje\r\n      }));\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Błąd pobierania prognozy pogody:\", error);\r\n    });\r\n  console.log(units);\r\n  console.log(API_URL2);\r\n  // async function getData() {\r\n  //   const response = await fetch(API_URL);\r\n  //   const data = await response.json();\r\n  //   setResponse(data);\r\n  //   console.log(data);\r\n  // }\r\n  // getData();\r\n\r\n  // fetch(API_URL, {\r\n  //   method: \"GET\",\r\n  //   headers: {\r\n  //     \"Content-Type\": \"application/json\",\r\n  //   },\r\n  // })\r\n  //   .then((res) => {\r\n  //     if (res.ok) {\r\n  //       console.log(res);\r\n  //     } else {\r\n  //       console.log(\"Mamy problem !\");\r\n  //     }\r\n  //   })\r\n  //   .catch((error) => {\r\n  //     console.error(error);\r\n  //   });\r\n\r\n  const generateChart = () => {\r\n    const labels = hourlyData.map((item) => item.time);\r\n    const temperatures = hourlyData.map((item) => item.temperature);\r\n\r\n    const ctx = document.getElementById(\"weatherChart\").getContext(\"2d\");\r\n    new Chart(ctx, {\r\n      type: \"line\",\r\n      data: {\r\n        labels: labels,\r\n        datasets: [\r\n          {\r\n            label: \"Temperatura (°C)\",\r\n            data: temperatures,\r\n            borderColor: \"blue\",\r\n            backgroundColor: \"rgba(0, 0, 255, 0.2)\",\r\n            fill: true,\r\n          },\r\n        ],\r\n      },\r\n      options: {\r\n        responsive: true,\r\n        scales: {\r\n          y: {\r\n            beginAtZero: true,\r\n          },\r\n        },\r\n      },\r\n    });\r\n  };\r\n\r\n  return <canvas id=\"weatherChart\" width=\"400\" height=\"200\" />;\r\n}\r\n\r\nexport default WeatherAPI;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}