{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SUPER PC\\\\Desktop\\\\weather-app\\\\weather-app\\\\src\\\\pages\\\\WeatherForcast.js\",\n  _s = $RefreshSig$();\nimport logo from \"../img/logo2.png\";\nimport { useCookies } from \"react-cookie\";\nimport sun from \"../img/weather-icons/sun.png\";\nimport \"../App.css\";\nimport \"../styles/WeatherForcast-style.css\";\nimport \"../styles/WeatherForcast-bg.css\";\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { Link } from \"react-router-dom\";\nimport WeatherAPI from \"../scripts/WeatherAPI\";\nimport Layout from \"../layout/layout\";\nimport WeatherAPIConf from \"../scripts/WeatherAPIConf\";\nimport iconThunderstorm from \"../img/weather-icons/thunderstorm.png\";\nimport iconDizzle from \"../img/weather-icons/drizzle.png\";\nimport iconRain from \"../img/weather-icons/rain.png\";\nimport iconIce from \"../img/weather-icons/ice.png\";\nimport iconUnknown from \"../img/weather-icons/unknown.png\";\nimport iconFog from \"../img/weather-icons/fog.png\";\nimport iconSun from \"../img/weather-icons/sun.png\";\nimport iconCloud from \"../img/weather-icons/cloud.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction WeatherForcast(props) {\n  _s();\n  //const { cityName, unitsData } = null;\n  const [temperature, setTemperature] = useState(null);\n  const [status, setStatus] = useState(null);\n  const [allWeather, setAllWeather] = useState(\"\");\n  const [cookies] = useCookies([\"cityName\", \"units\"]);\n  const [option, setOption] = useState(false);\n  const [delayed, setDelayed] = useState(true); // Dodana zmienna flagowa\n\n  const city = props.data.cityName || cookies.cityName || \"Gdańsk\";\n  let units = props.data.units || cookies.units || false;\n  if (typeof units == \"string\") {\n    units = units == \"true\" ? true : false;\n  }\n  WeatherAPIConf.API_FORMAT = \"forecast\";\n  WeatherAPIConf.API_CITY = city;\n  WeatherAPIConf.API_UNITS = Boolean(units) === false ? \"&units=metric\" : \"&units=imperial\";\n  let tempUnit = units === false ? \"°C\" : \"°F\";\n  let dateCurrent = new Date();\n  useEffect(() => {\n    if (delayed) return;\n    const API_URL = WeatherAPIConf.API_LINK + WeatherAPIConf.API_FORMAT + WeatherAPIConf.API_CITYQ + WeatherAPIConf.API_CITY + WeatherAPIConf.API_UNITS + WeatherAPIConf.API_KEY;\n    let tabWeek = [];\n    axios.get(API_URL).then(res => {\n      for (let i = 0; i < 40; i++) {\n        let date = res.data.list[i].dt_txt;\n        let [datePart, timePart] = date.split(\" \");\n        let temperature = res.data.list[i].main[\"temp\"];\n        let pressure = res.data.list[i].main[\"pressure\"];\n        let humidity = res.data.list[i].main[\"humidity\"];\n        let status = res.data.list[i].weather[0][\"id\"];\n        tabWeek.push([datePart, timePart, temperature, pressure, humidity, status]);\n      }\n      setTemperature(Math.round(tabWeek[0][2]));\n      setStatus(tabWeek[0][5]);\n      const jsonAll = JSON.stringify(tabWeek);\n      setAllWeather(jsonAll);\n    }).catch(error => {\n      //console.error(\"Błąd pobierania prognozy pogody:\", error);\n    });\n  }, [delayed]);\n  const getIcon = statusCode => {\n    if (statusCode >= 200 && statusCode < 300) {\n      return iconThunderstorm;\n    } else if (statusCode >= 300 && statusCode < 400) {\n      return iconDizzle;\n    } else if (statusCode >= 500 && statusCode < 600) {\n      return iconRain;\n    } else if (statusCode >= 600 && statusCode < 700) {\n      return iconIce;\n    } else if (statusCode >= 700 && statusCode < 800) {\n      return iconFog;\n    } else if (statusCode === 800) {\n      return iconSun;\n    } else if (statusCode > 800 && statusCode < 900) {\n      return iconCloud;\n    }\n  };\n  const getBg = statusCode => {\n    if (statusCode >= 200 && statusCode < 300) {\n      return iconThunderstorm;\n    } else if (statusCode >= 300 && statusCode < 400) {\n      return \"thstorm-bg\";\n    } else if (statusCode >= 500 && statusCode < 600) {\n      return \"rain-bg\";\n    } else if (statusCode >= 600 && statusCode < 700) {\n      return \"snow-bg\";\n    } else if (statusCode >= 700 && statusCode < 800) {\n      return \"thstorm-bg\";\n    } else if (statusCode === 800) {\n      return \"sun-bg\";\n    } else if (statusCode > 800 && statusCode < 900) {\n      return \"clouds-bg\";\n    } else {\n      return \" \";\n    }\n  };\n  const maxStatus = (groupedData, keyMain) => {\n    let maxStatus = Infinity * 100;\n    let counter = 0;\n    Object.entries(groupedData).forEach(_ref => {\n      let [key, group] = _ref;\n      if (keyMain === key) {\n        group.forEach(item => {\n          let statusCurrent = item[4];\n          if (statusCurrent >= 200 && statusCurrent < 300 || statusCurrent > 400 && statusCurrent < 700 || statusCurrent > 800 && statusCurrent < 900) {\n            if (statusCurrent < maxStatus) {\n              counter++; //count bad weather\n              maxStatus = statusCurrent;\n            }\n          } else {\n            if (statusCurrent === 800 & counter === 0) {\n              maxStatus = statusCurrent;\n            }\n          }\n        });\n      }\n    });\n    return maxStatus;\n  };\n  const maxTemp = (groupedData, keyMain) => {\n    let maxTemperature = -Infinity;\n    Object.entries(groupedData).forEach(_ref2 => {\n      let [key, group] = _ref2;\n      if (keyMain === key) {\n        group.forEach(item => {\n          let temperature = item[1];\n          if (temperature > maxTemperature) {\n            maxTemperature = temperature;\n          }\n        });\n      }\n    });\n    return maxTemperature;\n  };\n  const minTemp = (groupedData, keyMain) => {\n    let minTemperature = Infinity;\n    Object.entries(groupedData).forEach(_ref3 => {\n      let [key, group] = _ref3;\n      if (keyMain === key) {\n        group.forEach(item => {\n          let temperature = item[1];\n          if (temperature < minTemperature) {\n            minTemperature = temperature;\n          }\n        });\n      }\n    });\n    return minTemperature;\n  };\n  const containerWeather = option => {\n    console.log(typeof allWeather == \"string\");\n    try {\n      if (typeof allWeather == \"string\") {\n        let allDatas = JSON.parse(allWeather);\n        const groupedData = allDatas.reduce((groups, item) => {\n          const key = item[0]; // Klucz główny - pierwszy element w tablicy\n          if (!groups[key]) {\n            groups[key] = []; // Tworzenie nowej grupy, jeśli jeszcze nie istnieje\n          }\n\n          groups[key].push(item.slice(1)); // Dodawanie reszty elementów do grupy\n\n          return groups;\n        }, {});\n        if (option === true) {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"weatherDetails2\",\n            class: \"setBox\",\n            children: Object.entries(groupedData).map(_ref4 => {\n              let [key, group] = _ref4;\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"App-panel-group\",\n                children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                  className: \"App-panel3 sticky\",\n                  children: key\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 207,\n                  columnNumber: 19\n                }, this), group.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"App-panel2\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    class: \"hours\",\n                    children: /*#__PURE__*/_jsxDEV(\"h3\", {\n                      children: item[0].toString().slice(0, 5)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 211,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 210,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"weatherData2\",\n                    children: [Math.round(item[1]), tempUnit]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 213,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"icon2\",\n                    children: /*#__PURE__*/_jsxDEV(\"img\", {\n                      src: getIcon(item[4]),\n                      alt: \"sun\",\n                      className: \"App-icon\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 218,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 217,\n                    columnNumber: 23\n                  }, this)]\n                }, index, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 209,\n                  columnNumber: 21\n                }, this))]\n              }, key, true, {\n                fileName: _jsxFileName,\n                lineNumber: 206,\n                columnNumber: 17\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 13\n          }, this);\n        } else {\n          let dateCurrent = new Date();\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"weatherDetails\",\n            children: Object.entries(groupedData).map(_ref5 => {\n              let [key, group] = _ref5;\n              return key !== dateCurrent.toISOString().slice(0, 10) && /*#__PURE__*/_jsxDEV(React.Fragment, {\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"App-panel4\",\n                  children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                    children: key\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 239,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"weatherData2\",\n                    children: [Math.round(maxTemp(groupedData, key)), \"\\xB0/\", Math.round(minTemp(groupedData, key)), tempUnit]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 240,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"icon2\",\n                    children: /*#__PURE__*/_jsxDEV(\"img\", {\n                      src: getIcon(maxStatus(groupedData, key)),\n                      alt: \"icon\",\n                      className: \"App-icon\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 246,\n                      columnNumber: 27\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 245,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 238,\n                  columnNumber: 23\n                }, this)\n              }, key, false, {\n                fileName: _jsxFileName,\n                lineNumber: 237,\n                columnNumber: 21\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 13\n          }, this);\n        }\n      }\n    } catch {}\n  };\n  const handleClick1 = () => {\n    setOption(true);\n    setDelayed(false);\n    // Dodaj tutaj swoje działania po kliknięciu przycisku\n  };\n\n  const handleClick2 = () => {\n    setOption(false);\n    setDelayed(false);\n    // Dodaj tutaj swoje działania po kliknięciu przycisku\n  };\n\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    children: !delayed && /*#__PURE__*/_jsxDEV(\"section\", {\n      className: getBg(status),\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"App-panel\",\n        children: [/*#__PURE__*/_jsxDEV(\"date\", {\n          className: \"date\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"left\",\n            children: [dateCurrent.toString().split(\" \")[0] + \" \", dateCurrent.toLocaleDateString(\"pl-PL\")]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 281,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"right\",\n            children: dateCurrent.toString().split(\" \")[4].slice(0, 5)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 286,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"content\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: WeatherAPIConf.API_CITY\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 291,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"weatherData\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              class: \"temp\",\n              children: temperature + tempUnit\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 293,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              class: \"icon\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: getIcon(status)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 295,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 294,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 292,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"App-panel-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleClick1,\n          children: \"pogoda godzinowa po godzinie\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleClick2,\n          children: \"pogoda najbli\\u017Csze na 5 dni\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 11\n      }, this), containerWeather(option)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 276,\n    columnNumber: 5\n  }, this);\n}\n_s(WeatherForcast, \"Ry+3qTgiP+NK47idodDxr9JBchw=\", false, function () {\n  return [useCookies];\n});\n_c = WeatherForcast;\nexport default WeatherForcast;\nvar _c;\n$RefreshReg$(_c, \"WeatherForcast\");","map":{"version":3,"names":["logo","useCookies","sun","React","useEffect","useState","axios","Link","WeatherAPI","Layout","WeatherAPIConf","iconThunderstorm","iconDizzle","iconRain","iconIce","iconUnknown","iconFog","iconSun","iconCloud","jsxDEV","_jsxDEV","WeatherForcast","props","_s","temperature","setTemperature","status","setStatus","allWeather","setAllWeather","cookies","option","setOption","delayed","setDelayed","city","data","cityName","units","API_FORMAT","API_CITY","API_UNITS","Boolean","tempUnit","dateCurrent","Date","API_URL","API_LINK","API_CITYQ","API_KEY","tabWeek","get","then","res","i","date","list","dt_txt","datePart","timePart","split","main","pressure","humidity","weather","push","Math","round","jsonAll","JSON","stringify","catch","error","getIcon","statusCode","getBg","maxStatus","groupedData","keyMain","Infinity","counter","Object","entries","forEach","_ref","key","group","item","statusCurrent","maxTemp","maxTemperature","_ref2","minTemp","minTemperature","_ref3","containerWeather","console","log","allDatas","parse","reduce","groups","slice","id","class","children","map","_ref4","className","fileName","_jsxFileName","lineNumber","columnNumber","index","toString","src","alt","_ref5","toISOString","Fragment","handleClick1","handleClick2","toLocaleDateString","onClick","_c","$RefreshReg$"],"sources":["C:/Users/SUPER PC/Desktop/weather-app/weather-app/src/pages/WeatherForcast.js"],"sourcesContent":["import logo from \"../img/logo2.png\";\r\nimport { useCookies } from \"react-cookie\";\r\nimport sun from \"../img/weather-icons/sun.png\";\r\nimport \"../App.css\";\r\nimport \"../styles/WeatherForcast-style.css\";\r\nimport \"../styles/WeatherForcast-bg.css\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Link } from \"react-router-dom\";\r\nimport WeatherAPI from \"../scripts/WeatherAPI\";\r\nimport Layout from \"../layout/layout\";\r\nimport WeatherAPIConf from \"../scripts/WeatherAPIConf\";\r\nimport iconThunderstorm from \"../img/weather-icons/thunderstorm.png\";\r\nimport iconDizzle from \"../img/weather-icons/drizzle.png\";\r\nimport iconRain from \"../img/weather-icons/rain.png\";\r\nimport iconIce from \"../img/weather-icons/ice.png\";\r\nimport iconUnknown from \"../img/weather-icons/unknown.png\";\r\nimport iconFog from \"../img/weather-icons/fog.png\";\r\nimport iconSun from \"../img/weather-icons/sun.png\";\r\nimport iconCloud from \"../img/weather-icons/cloud.png\";\r\n\r\nfunction WeatherForcast(props) {\r\n  //const { cityName, unitsData } = null;\r\n  const [temperature, setTemperature] = useState(null);\r\n  const [status, setStatus] = useState(null);\r\n  const [allWeather, setAllWeather] = useState(\"\");\r\n  const [cookies] = useCookies([\"cityName\", \"units\"]);\r\n  const [option, setOption] = useState(false);\r\n  const [delayed, setDelayed] = useState(true); // Dodana zmienna flagowa\r\n\r\n  const city = props.data.cityName || cookies.cityName || \"Gdańsk\";\r\n  let units = props.data.units || cookies.units || false;\r\n\r\n  if (typeof units == \"string\") {\r\n    units = units == \"true\" ? true : false;\r\n  }\r\n\r\n  WeatherAPIConf.API_FORMAT = \"forecast\";\r\n  WeatherAPIConf.API_CITY = city;\r\n  WeatherAPIConf.API_UNITS =\r\n    Boolean(units) === false ? \"&units=metric\" : \"&units=imperial\";\r\n\r\n  let tempUnit = units === false ? \"°C\" : \"°F\";\r\n  let dateCurrent = new Date();\r\n\r\n  useEffect(() => {\r\n    if (delayed) return;\r\n\r\n    const API_URL =\r\n      WeatherAPIConf.API_LINK +\r\n      WeatherAPIConf.API_FORMAT +\r\n      WeatherAPIConf.API_CITYQ +\r\n      WeatherAPIConf.API_CITY +\r\n      WeatherAPIConf.API_UNITS +\r\n      WeatherAPIConf.API_KEY;\r\n\r\n    let tabWeek = [];\r\n\r\n    axios\r\n      .get(API_URL)\r\n      .then((res) => {\r\n        for (let i = 0; i < 40; i++) {\r\n          let date = res.data.list[i].dt_txt;\r\n          let [datePart, timePart] = date.split(\" \");\r\n          let temperature = res.data.list[i].main[\"temp\"];\r\n          let pressure = res.data.list[i].main[\"pressure\"];\r\n          let humidity = res.data.list[i].main[\"humidity\"];\r\n          let status = res.data.list[i].weather[0][\"id\"];\r\n          tabWeek.push([\r\n            datePart,\r\n            timePart,\r\n            temperature,\r\n            pressure,\r\n            humidity,\r\n            status,\r\n          ]);\r\n        }\r\n        setTemperature(Math.round(tabWeek[0][2]));\r\n        setStatus(tabWeek[0][5]);\r\n        const jsonAll = JSON.stringify(tabWeek);\r\n        setAllWeather(jsonAll);\r\n      })\r\n      .catch((error) => {\r\n        //console.error(\"Błąd pobierania prognozy pogody:\", error);\r\n      });\r\n  }, [delayed]);\r\n\r\n  const getIcon = (statusCode) => {\r\n    if (statusCode >= 200 && statusCode < 300) {\r\n      return iconThunderstorm;\r\n    } else if (statusCode >= 300 && statusCode < 400) {\r\n      return iconDizzle;\r\n    } else if (statusCode >= 500 && statusCode < 600) {\r\n      return iconRain;\r\n    } else if (statusCode >= 600 && statusCode < 700) {\r\n      return iconIce;\r\n    } else if (statusCode >= 700 && statusCode < 800) {\r\n      return iconFog;\r\n    } else if (statusCode === 800) {\r\n      return iconSun;\r\n    } else if (statusCode > 800 && statusCode < 900) {\r\n      return iconCloud;\r\n    }\r\n  };\r\n\r\n  const getBg = (statusCode) => {\r\n    if (statusCode >= 200 && statusCode < 300) {\r\n      return iconThunderstorm;\r\n    } else if (statusCode >= 300 && statusCode < 400) {\r\n      return \"thstorm-bg\";\r\n    } else if (statusCode >= 500 && statusCode < 600) {\r\n      return \"rain-bg\";\r\n    } else if (statusCode >= 600 && statusCode < 700) {\r\n      return \"snow-bg\";\r\n    } else if (statusCode >= 700 && statusCode < 800) {\r\n      return \"thstorm-bg\";\r\n    } else if (statusCode === 800) {\r\n      return \"sun-bg\";\r\n    } else if (statusCode > 800 && statusCode < 900) {\r\n      return \"clouds-bg\";\r\n    } else {\r\n      return \" \";\r\n    }\r\n  };\r\n\r\n  const maxStatus = (groupedData, keyMain) => {\r\n    let maxStatus = Infinity * 100;\r\n    let counter = 0;\r\n    Object.entries(groupedData).forEach(([key, group]) => {\r\n      if (keyMain === key) {\r\n        group.forEach((item) => {\r\n          let statusCurrent = item[4];\r\n\r\n          if (\r\n            (statusCurrent >= 200 && statusCurrent < 300) ||\r\n            (statusCurrent > 400 && statusCurrent < 700) ||\r\n            (statusCurrent > 800 && statusCurrent < 900)\r\n          ) {\r\n            if (statusCurrent < maxStatus) {\r\n              counter++; //count bad weather\r\n              maxStatus = statusCurrent;\r\n            }\r\n          } else {\r\n            if ((statusCurrent === 800) & (counter === 0)) {\r\n              maxStatus = statusCurrent;\r\n            }\r\n          }\r\n        });\r\n      }\r\n    });\r\n\r\n    return maxStatus;\r\n  };\r\n\r\n  const maxTemp = (groupedData, keyMain) => {\r\n    let maxTemperature = -Infinity;\r\n\r\n    Object.entries(groupedData).forEach(([key, group]) => {\r\n      if (keyMain === key) {\r\n        group.forEach((item) => {\r\n          let temperature = item[1];\r\n          if (temperature > maxTemperature) {\r\n            maxTemperature = temperature;\r\n          }\r\n        });\r\n      }\r\n    });\r\n    return maxTemperature;\r\n  };\r\n\r\n  const minTemp = (groupedData, keyMain) => {\r\n    let minTemperature = Infinity;\r\n\r\n    Object.entries(groupedData).forEach(([key, group]) => {\r\n      if (keyMain === key) {\r\n        group.forEach((item) => {\r\n          let temperature = item[1];\r\n          if (temperature < minTemperature) {\r\n            minTemperature = temperature;\r\n          }\r\n        });\r\n      }\r\n    });\r\n    return minTemperature;\r\n  };\r\n\r\n  const containerWeather = (option) => {\r\n    console.log(typeof allWeather == \"string\");\r\n    try {\r\n      if (typeof allWeather == \"string\") {\r\n        let allDatas = JSON.parse(allWeather);\r\n        const groupedData = allDatas.reduce((groups, item) => {\r\n          const key = item[0]; // Klucz główny - pierwszy element w tablicy\r\n          if (!groups[key]) {\r\n            groups[key] = []; // Tworzenie nowej grupy, jeśli jeszcze nie istnieje\r\n          }\r\n          groups[key].push(item.slice(1)); // Dodawanie reszty elementów do grupy\r\n\r\n          return groups;\r\n        }, {});\r\n\r\n        if (option === true) {\r\n          return (\r\n            <div id=\"weatherDetails2\" class=\"setBox\">\r\n              {Object.entries(groupedData).map(([key, group]) => (\r\n                <div key={key} className=\"App-panel-group\">\r\n                  <h2 className=\"App-panel3 sticky\">{key}</h2>\r\n                  {group.map((item, index) => (\r\n                    <div key={index} className=\"App-panel2\">\r\n                      <div class=\"hours\">\r\n                        <h3>{item[0].toString().slice(0, 5)}</h3>\r\n                      </div>\r\n                      <div className=\"weatherData2\">\r\n                        {Math.round(item[1])}\r\n                        {tempUnit}\r\n                      </div>\r\n                      <div className=\"icon2\">\r\n                        <img\r\n                          src={getIcon(item[4])}\r\n                          alt=\"sun\"\r\n                          className=\"App-icon\"\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              ))}\r\n            </div>\r\n          );\r\n        } else {\r\n          let dateCurrent = new Date();\r\n          return (\r\n            <div id=\"weatherDetails\">\r\n              {Object.entries(groupedData).map(\r\n                ([key, group]) =>\r\n                  key !== dateCurrent.toISOString().slice(0, 10) && (\r\n                    <React.Fragment key={key}>\r\n                      <div className=\"App-panel4\">\r\n                        <h2>{key}</h2>\r\n                        <div className=\"weatherData2\">\r\n                          {Math.round(maxTemp(groupedData, key))}°/\r\n                          {Math.round(minTemp(groupedData, key))}\r\n                          {tempUnit}\r\n                        </div>\r\n                        <div className=\"icon2\">\r\n                          <img\r\n                            src={getIcon(maxStatus(groupedData, key))}\r\n                            alt=\"icon\"\r\n                            className=\"App-icon\"\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    </React.Fragment>\r\n                  )\r\n              )}\r\n            </div>\r\n          );\r\n        }\r\n      }\r\n    } catch {}\r\n  };\r\n\r\n  const handleClick1 = () => {\r\n    setOption(true);\r\n    setDelayed(false);\r\n    // Dodaj tutaj swoje działania po kliknięciu przycisku\r\n  };\r\n\r\n  const handleClick2 = () => {\r\n    setOption(false);\r\n    setDelayed(false);\r\n    // Dodaj tutaj swoje działania po kliknięciu przycisku\r\n  };\r\n\r\n  return (\r\n    <Layout>\r\n      {!delayed && (\r\n        <section className={getBg(status)}>\r\n          <div className=\"App-panel\">\r\n            <date className=\"date\">\r\n              <div className=\"left\">\r\n                {dateCurrent.toString().split(\" \")[0] + \" \"}\r\n\r\n                {dateCurrent.toLocaleDateString(\"pl-PL\")}\r\n              </div>\r\n              <div className=\"right\">\r\n                {dateCurrent.toString().split(\" \")[4].slice(0, 5)}\r\n              </div>\r\n            </date>\r\n            <div className=\"content\">\r\n              <h2>{WeatherAPIConf.API_CITY}</h2>\r\n              <div className=\"weatherData\">\r\n                <div class=\"temp\">{temperature + tempUnit}</div>\r\n                <div class=\"icon\">\r\n                  <img src={getIcon(status)} />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"App-panel-buttons\">\r\n            <button onClick={handleClick1}>pogoda godzinowa po godzinie</button>\r\n            <button onClick={handleClick2}>pogoda najbliższe na 5 dni</button>\r\n          </div>\r\n          {containerWeather(option)}\r\n        </section>\r\n      )}\r\n    </Layout>\r\n  );\r\n}\r\n\r\nexport default WeatherForcast;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}