{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SUPER PC\\\\Desktop\\\\weather-app\\\\weather-app\\\\src\\\\scripts\\\\WeatherAPI.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport Axios from \"axios\";\nimport Chart from \"chart.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = API_LINK + API_CITY + API_UNITS + API_KEY;\nfunction WeatherAPI(cityName, units) {\n  _s();\n  const [hourlyData, setHourlyData] = useState(null);\n  useEffect(() => {\n    async function fetchWeatherData() {\n      try {\n        const response = await axios.get(`${API_URL}?key=${API_KEY}&q=YOUR_CITY&days=1&aqi=no&alerts=no&hour=24`);\n        const data = response.data;\n\n        // Przetwarzanie danych godzinowej prognozy pogody\n        const hourlyForecast = data.forecast.forecastday[0].hour.map(item => ({\n          time: item.time,\n          // Czas\n          temperature: item.temp_c // Temperatura w stopniach Celsiusza\n          // Dodaj inne niezbędne informacje\n        }));\n\n        setHourlyData(hourlyForecast);\n      } catch (error) {\n        console.error(\"Błąd pobierania prognozy pogody:\", error);\n      }\n    }\n    fetchWeatherData();\n  }, []);\n  useEffect(() => {\n    if (hourlyData) {\n      // Generowanie wykresu po otrzymaniu danych godzinowej prognozy pogody\n      generateChart();\n    }\n  }, [hourlyData]);\n  const generateChart = () => {\n    const labels = hourlyData.map(item => item.time);\n    const temperatures = hourlyData.map(item => item.temperature);\n    const ctx = document.getElementById(\"weatherChart\").getContext(\"2d\");\n    new Chart(ctx, {\n      type: \"line\",\n      data: {\n        labels: labels,\n        datasets: [{\n          label: \"Temperatura (°C)\",\n          data: temperatures,\n          borderColor: \"blue\",\n          backgroundColor: \"rgba(0, 0, 255, 0.2)\",\n          fill: true\n        }]\n      },\n      options: {\n        responsive: true,\n        scales: {\n          y: {\n            beginAtZero: true\n          }\n        }\n      }\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    id: \"weatherChart\",\n    width: \"400\",\n    height: \"200\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 10\n  }, this);\n}\n_s(WeatherAPI, \"rOgxkglYCV72+AA9G1z9b88ObDE=\");\n_c = WeatherAPI;\nexport default WeatherAPI;\nvar _c;\n$RefreshReg$(_c, \"WeatherAPI\");","map":{"version":3,"names":["React","Axios","Chart","jsxDEV","_jsxDEV","API_URL","API_LINK","API_CITY","API_UNITS","API_KEY","WeatherAPI","cityName","units","_s","hourlyData","setHourlyData","useState","useEffect","fetchWeatherData","response","axios","get","data","hourlyForecast","forecast","forecastday","hour","map","item","time","temperature","temp_c","error","console","generateChart","labels","temperatures","ctx","document","getElementById","getContext","type","datasets","label","borderColor","backgroundColor","fill","options","responsive","scales","y","beginAtZero","id","width","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/SUPER PC/Desktop/weather-app/weather-app/src/scripts/WeatherAPI.js"],"sourcesContent":["import React from \"react\";\r\nimport Axios from \"axios\";\r\nimport Chart from \"chart.js\";\r\n\r\n\r\n\r\nconst API_URL = API_LINK + API_CITY + API_UNITS + API_KEY;\r\n\r\nfunction WeatherAPI(cityName, units) {\r\n\r\n  \r\n  \r\n  const [hourlyData, setHourlyData] = useState(null);\r\n\r\n  useEffect(() => {\r\n    async function fetchWeatherData() {\r\n      try {\r\n        const response = await axios.get(\r\n          `${API_URL}?key=${API_KEY}&q=YOUR_CITY&days=1&aqi=no&alerts=no&hour=24`\r\n        );\r\n        const data = response.data;\r\n\r\n        // Przetwarzanie danych godzinowej prognozy pogody\r\n        const hourlyForecast = data.forecast.forecastday[0].hour.map(\r\n          (item) => ({\r\n            time: item.time, // Czas\r\n            temperature: item.temp_c, // Temperatura w stopniach Celsiusza\r\n            // Dodaj inne niezbędne informacje\r\n          })\r\n        );\r\n\r\n        setHourlyData(hourlyForecast);\r\n      } catch (error) {\r\n        console.error(\"Błąd pobierania prognozy pogody:\", error);\r\n      }\r\n    }\r\n\r\n    fetchWeatherData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (hourlyData) {\r\n      // Generowanie wykresu po otrzymaniu danych godzinowej prognozy pogody\r\n      generateChart();\r\n    }\r\n  }, [hourlyData]);\r\n\r\n  const generateChart = () => {\r\n    const labels = hourlyData.map((item) => item.time);\r\n    const temperatures = hourlyData.map((item) => item.temperature);\r\n\r\n    const ctx = document.getElementById(\"weatherChart\").getContext(\"2d\");\r\n    new Chart(ctx, {\r\n      type: \"line\",\r\n      data: {\r\n        labels: labels,\r\n        datasets: [\r\n          {\r\n            label: \"Temperatura (°C)\",\r\n            data: temperatures,\r\n            borderColor: \"blue\",\r\n            backgroundColor: \"rgba(0, 0, 255, 0.2)\",\r\n            fill: true,\r\n          },\r\n        ],\r\n      },\r\n      options: {\r\n        responsive: true,\r\n        scales: {\r\n          y: {\r\n            beginAtZero: true,\r\n          },\r\n        },\r\n      },\r\n    });\r\n  };\r\n\r\n  return <canvas id=\"weatherChart\" width=\"400\" height=\"200\" />;\r\n}\r\n\r\nexport default WeatherAPI;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,KAAK,MAAM,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAI7B,MAAMC,OAAO,GAAGC,QAAQ,GAAGC,QAAQ,GAAGC,SAAS,GAAGC,OAAO;AAEzD,SAASC,UAAUA,CAACC,QAAQ,EAAEC,KAAK,EAAE;EAAAC,EAAA;EAInC,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGC,QAAQ,CAAC,IAAI,CAAC;EAElDC,SAAS,CAAC,MAAM;IACd,eAAeC,gBAAgBA,CAAA,EAAG;MAChC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACC,GAAG,CAC7B,GAAEhB,OAAQ,QAAOI,OAAQ,8CAC5B,CAAC;QACD,MAAMa,IAAI,GAAGH,QAAQ,CAACG,IAAI;;QAE1B;QACA,MAAMC,cAAc,GAAGD,IAAI,CAACE,QAAQ,CAACC,WAAW,CAAC,CAAC,CAAC,CAACC,IAAI,CAACC,GAAG,CACzDC,IAAI,KAAM;UACTC,IAAI,EAAED,IAAI,CAACC,IAAI;UAAE;UACjBC,WAAW,EAAEF,IAAI,CAACG,MAAM,CAAE;UAC1B;QACF,CAAC,CACH,CAAC;;QAEDhB,aAAa,CAACQ,cAAc,CAAC;MAC/B,CAAC,CAAC,OAAOS,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;MAC1D;IACF;IAEAd,gBAAgB,CAAC,CAAC;EACpB,CAAC,EAAE,EAAE,CAAC;EAEND,SAAS,CAAC,MAAM;IACd,IAAIH,UAAU,EAAE;MACd;MACAoB,aAAa,CAAC,CAAC;IACjB;EACF,CAAC,EAAE,CAACpB,UAAU,CAAC,CAAC;EAEhB,MAAMoB,aAAa,GAAGA,CAAA,KAAM;IAC1B,MAAMC,MAAM,GAAGrB,UAAU,CAACa,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACC,IAAI,CAAC;IAClD,MAAMO,YAAY,GAAGtB,UAAU,CAACa,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACE,WAAW,CAAC;IAE/D,MAAMO,GAAG,GAAGC,QAAQ,CAACC,cAAc,CAAC,cAAc,CAAC,CAACC,UAAU,CAAC,IAAI,CAAC;IACpE,IAAItC,KAAK,CAACmC,GAAG,EAAE;MACbI,IAAI,EAAE,MAAM;MACZnB,IAAI,EAAE;QACJa,MAAM,EAAEA,MAAM;QACdO,QAAQ,EAAE,CACR;UACEC,KAAK,EAAE,kBAAkB;UACzBrB,IAAI,EAAEc,YAAY;UAClBQ,WAAW,EAAE,MAAM;UACnBC,eAAe,EAAE,sBAAsB;UACvCC,IAAI,EAAE;QACR,CAAC;MAEL,CAAC;MACDC,OAAO,EAAE;QACPC,UAAU,EAAE,IAAI;QAChBC,MAAM,EAAE;UACNC,CAAC,EAAE;YACDC,WAAW,EAAE;UACf;QACF;MACF;IACF,CAAC,CAAC;EACJ,CAAC;EAED,oBAAO/C,OAAA;IAAQgD,EAAE,EAAC,cAAc;IAACC,KAAK,EAAC,KAAK;IAACC,MAAM,EAAC;EAAK;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAC9D;AAAC7C,EAAA,CAtEQH,UAAU;AAAAiD,EAAA,GAAVjD,UAAU;AAwEnB,eAAeA,UAAU;AAAC,IAAAiD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}