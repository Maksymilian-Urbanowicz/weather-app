{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SUPER PC\\\\Desktop\\\\weather-app\\\\weather-app\\\\src\\\\pages\\\\WeatherForcast.js\",\n  _s = $RefreshSig$();\nimport logo from \"../img/logo2.png\";\nimport sun from \"../img/weather-icons/sun.png\";\nimport \"../App.css\";\nimport \"../styles/WeatherForcast-style.css\";\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { Link } from \"react-router-dom\";\nimport WeatherAPI from \"../scripts/WeatherAPI\";\nimport Layout from \"../layout/layout\";\nimport WeatherAPIConf from \"../scripts/WeatherAPIConf\";\nimport iconThunderstorm from \"../img/weather-icons/thunderstorm.png\";\nimport iconDizzle from \"../img/weather-icons/drizzle.png\";\nimport iconRain from \"../img/weather-icons/rain.png\";\nimport iconIce from \"../img/weather-icons/ice.png\";\nimport iconUnknown from \"../img/weather-icons/unknown.png\";\nimport iconFog from \"../img/weather-icons/fog.png\";\nimport iconSun from \"../img/weather-icons/sun.png\";\nimport iconCloud from \"../img/weather-icons/cloud.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction WeatherForcast(_ref) {\n  _s();\n  let {\n    data\n  } = _ref;\n  const [temperature, setTemperature] = useState(null);\n  const [status, setStatus] = useState(null);\n  const [allWeather, setAllWeather] = useState(\"\");\n  const city = data.cityName || \"Gdańsk\";\n  const units = data.units || false;\n  WeatherAPIConf.API_FORMAT = \"forecast\";\n  WeatherAPIConf.API_CITY = city;\n  WeatherAPIConf.API_UNITS = units === false ? \"&units=metric\" : \"&units=imperial\";\n  let tempUnit = units === false ? \"°C\" : \"°F\";\n  let dateCurrent = new Date();\n  useEffect(() => {\n    const fetchWeatherForecast = async () => {\n      const API_URL = WeatherAPIConf.API_LINK + WeatherAPIConf.API_FORMAT + WeatherAPIConf.API_CITYQ + WeatherAPIConf.API_CITY + WeatherAPIConf.API_UNITS + WeatherAPIConf.API_KEY;\n      let tabWeek = [];\n      console.log(API_URL);\n      try {\n        const response = await fetch(API_URL);\n        setStatus(response);\n        return await response.json();\n      } catch (error) {\n        console.error(\"Błąd pobierania prognozy pogody:\", error);\n      }\n    };\n    fetchWeatherForecast();\n    // .then((res) => {\n    //   for (let i = 0; i < 40; i++) {\n    //     let date = res.data.list[i].dt_txt;\n    //     let [datePart, timePart] = date.split(\" \");\n    //     let temperature = res.data.list[i].main[\"temp\"];\n    //     let pressure = res.data.list[i].main[\"pressure\"];\n    //     let humidity = res.data.list[i].main[\"humidity\"];\n    //     let status = res.data.list[i].weather[0][\"id\"];\n    //     tabWeek.push([\n    //       datePart,\n    //       timePart,\n    //       temperature,\n    //       pressure,\n    //       humidity,\n    //       status,\n    //     ]);\n\n    //     return (\n    //       <div className=\"App-panel2\">\n    //         <h3>{date}</h3>\n    //         <div className=\"weatherData2\">\n    //           <p>\n    //             {temperature}\n    //             {tempUnit}\n    //           </p>\n    //         </div>\n    //         <div className=\"icon2\">\n    //           <img src={getIcon(status)} alt=\"sun\" className=\"App-icon\" />\n    //         </div>\n    //       </div>\n    //     );\n    //   }\n    //   setTemperature(Math.round(tabWeek[0][2]));\n    //   setStatus(tabWeek[0][5]);\n    //   console.log(tabWeek);\n    //   //setAllWeather(tabWeek[0]);\n    // })\n    // .catch((error) => {\n    //   //console.error(\"Błąd pobierania prognozy pogody:\", error);\n    // });\n  });\n\n  const getIcon = statusCode => {\n    if (statusCode >= 200 && statusCode < 300) {\n      return iconThunderstorm;\n    } else if (statusCode >= 300 && statusCode < 400) {\n      return iconDizzle;\n    } else if (statusCode >= 500 && statusCode < 600) {\n      return iconRain;\n    } else if (statusCode >= 600 && statusCode < 700) {\n      return iconIce;\n    } else if (statusCode >= 700 && statusCode < 800) {\n      return iconFog;\n    } else if (statusCode == 800) {\n      return iconSun;\n    } else if (statusCode > 800 && statusCode < 900) {\n      return iconCloud;\n    }\n  };\n  let daysWeather = () => {\n    console.log(status);\n    // for (let i = 0; i < allWeather.length; i++) {\n    // return (\n    //   <div className=\"App-panel2\">\n    //     <h3>{}</h3>\n    //     <div className=\"weatherData2\">\n    //       <p>\n    //         {temperature}\n    //         {temperature}\n    //         {tempUnit}\n    //       </p>\n    //     </div>\n    //     <div className=\"icon2\">\n    //       <img src={getIcon(status)} alt=\"sun\" className=\"App-icon\" />\n    //       <img src={getIcon(status)} alt=\"sun\" className=\"App-icon\" />\n    //     </div>\n    //   </div>\n    // );\n    //}\n  };\n\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    children: /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"App-panel\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"date\",\n          children: [dateCurrent.toString().split(\" \")[0] + \" \", dateCurrent.toLocaleDateString(\"pl-PL\")]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"content\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: WeatherAPIConf.API_CITY\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"weatherData\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              class: \"temp\",\n              children: temperature + tempUnit\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 150,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              class: \"icon\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: getIcon(status)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 152,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"exampleCity\",\n        children: daysWeather()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 5\n  }, this);\n}\n_s(WeatherForcast, \"yn9wXJAA6SqREMu/QZF4NTuyxu4=\");\n_c = WeatherForcast;\nexport default WeatherForcast;\nvar _c;\n$RefreshReg$(_c, \"WeatherForcast\");","map":{"version":3,"names":["logo","sun","React","useEffect","useState","axios","Link","WeatherAPI","Layout","WeatherAPIConf","iconThunderstorm","iconDizzle","iconRain","iconIce","iconUnknown","iconFog","iconSun","iconCloud","jsxDEV","_jsxDEV","WeatherForcast","_ref","_s","data","temperature","setTemperature","status","setStatus","allWeather","setAllWeather","city","cityName","units","API_FORMAT","API_CITY","API_UNITS","tempUnit","dateCurrent","Date","fetchWeatherForecast","API_URL","API_LINK","API_CITYQ","API_KEY","tabWeek","console","log","response","fetch","json","error","getIcon","statusCode","daysWeather","children","className","toString","split","toLocaleDateString","fileName","_jsxFileName","lineNumber","columnNumber","class","src","id","_c","$RefreshReg$"],"sources":["C:/Users/SUPER PC/Desktop/weather-app/weather-app/src/pages/WeatherForcast.js"],"sourcesContent":["import logo from \"../img/logo2.png\";\r\nimport sun from \"../img/weather-icons/sun.png\";\r\nimport \"../App.css\";\r\nimport \"../styles/WeatherForcast-style.css\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Link } from \"react-router-dom\";\r\nimport WeatherAPI from \"../scripts/WeatherAPI\";\r\nimport Layout from \"../layout/layout\";\r\nimport WeatherAPIConf from \"../scripts/WeatherAPIConf\";\r\nimport iconThunderstorm from \"../img/weather-icons/thunderstorm.png\";\r\nimport iconDizzle from \"../img/weather-icons/drizzle.png\";\r\nimport iconRain from \"../img/weather-icons/rain.png\";\r\nimport iconIce from \"../img/weather-icons/ice.png\";\r\nimport iconUnknown from \"../img/weather-icons/unknown.png\";\r\nimport iconFog from \"../img/weather-icons/fog.png\";\r\nimport iconSun from \"../img/weather-icons/sun.png\";\r\nimport iconCloud from \"../img/weather-icons/cloud.png\";\r\n\r\nfunction WeatherForcast({ data }) {\r\n  const [temperature, setTemperature] = useState(null);\r\n  const [status, setStatus] = useState(null);\r\n  const [allWeather, setAllWeather] = useState(\"\");\r\n\r\n  const city = data.cityName || \"Gdańsk\";\r\n  const units = data.units || false;\r\n  WeatherAPIConf.API_FORMAT = \"forecast\";\r\n  WeatherAPIConf.API_CITY = city;\r\n  WeatherAPIConf.API_UNITS =\r\n    units === false ? \"&units=metric\" : \"&units=imperial\";\r\n\r\n  let tempUnit = units === false ? \"°C\" : \"°F\";\r\n  let dateCurrent = new Date();\r\n\r\n  useEffect(() => {\r\n    const fetchWeatherForecast = async () => {\r\n      const API_URL =\r\n        WeatherAPIConf.API_LINK +\r\n        WeatherAPIConf.API_FORMAT +\r\n        WeatherAPIConf.API_CITYQ +\r\n        WeatherAPIConf.API_CITY +\r\n        WeatherAPIConf.API_UNITS +\r\n        WeatherAPIConf.API_KEY;\r\n\r\n      let tabWeek = [];\r\n      console.log(API_URL);\r\n      try {\r\n        const response = await fetch(API_URL);\r\n        setStatus(response)\r\n        return await response.json();\r\n        \r\n      } catch (error) {\r\n        console.error(\"Błąd pobierania prognozy pogody:\", error);\r\n      }\r\n    };\r\n    fetchWeatherForecast();\r\n    // .then((res) => {\r\n    //   for (let i = 0; i < 40; i++) {\r\n    //     let date = res.data.list[i].dt_txt;\r\n    //     let [datePart, timePart] = date.split(\" \");\r\n    //     let temperature = res.data.list[i].main[\"temp\"];\r\n    //     let pressure = res.data.list[i].main[\"pressure\"];\r\n    //     let humidity = res.data.list[i].main[\"humidity\"];\r\n    //     let status = res.data.list[i].weather[0][\"id\"];\r\n    //     tabWeek.push([\r\n    //       datePart,\r\n    //       timePart,\r\n    //       temperature,\r\n    //       pressure,\r\n    //       humidity,\r\n    //       status,\r\n    //     ]);\r\n\r\n    //     return (\r\n    //       <div className=\"App-panel2\">\r\n    //         <h3>{date}</h3>\r\n    //         <div className=\"weatherData2\">\r\n    //           <p>\r\n    //             {temperature}\r\n    //             {tempUnit}\r\n    //           </p>\r\n    //         </div>\r\n    //         <div className=\"icon2\">\r\n    //           <img src={getIcon(status)} alt=\"sun\" className=\"App-icon\" />\r\n    //         </div>\r\n    //       </div>\r\n    //     );\r\n    //   }\r\n    //   setTemperature(Math.round(tabWeek[0][2]));\r\n    //   setStatus(tabWeek[0][5]);\r\n    //   console.log(tabWeek);\r\n    //   //setAllWeather(tabWeek[0]);\r\n    // })\r\n    // .catch((error) => {\r\n    //   //console.error(\"Błąd pobierania prognozy pogody:\", error);\r\n    // });\r\n  });\r\n\r\n  const getIcon = (statusCode) => {\r\n    if (statusCode >= 200 && statusCode < 300) {\r\n      return iconThunderstorm;\r\n    } else if (statusCode >= 300 && statusCode < 400) {\r\n      return iconDizzle;\r\n    } else if (statusCode >= 500 && statusCode < 600) {\r\n      return iconRain;\r\n    } else if (statusCode >= 600 && statusCode < 700) {\r\n      return iconIce;\r\n    } else if (statusCode >= 700 && statusCode < 800) {\r\n      return iconFog;\r\n    } else if (statusCode == 800) {\r\n      return iconSun;\r\n    } else if (statusCode > 800 && statusCode < 900) {\r\n      return iconCloud;\r\n    }\r\n  };\r\n\r\n  let daysWeather = () => {\r\n    console.log(status);\r\n    // for (let i = 0; i < allWeather.length; i++) {\r\n    // return (\r\n    //   <div className=\"App-panel2\">\r\n    //     <h3>{}</h3>\r\n    //     <div className=\"weatherData2\">\r\n    //       <p>\r\n    //         {temperature}\r\n    //         {temperature}\r\n    //         {tempUnit}\r\n    //       </p>\r\n    //     </div>\r\n    //     <div className=\"icon2\">\r\n    //       <img src={getIcon(status)} alt=\"sun\" className=\"App-icon\" />\r\n    //       <img src={getIcon(status)} alt=\"sun\" className=\"App-icon\" />\r\n    //     </div>\r\n    //   </div>\r\n    // );\r\n    //}\r\n  };\r\n\r\n  return (\r\n    <Layout>\r\n      <section>\r\n        <div className=\"App-panel\">\r\n          <div className=\"date\">\r\n            {dateCurrent.toString().split(\" \")[0] + \" \"}\r\n            {dateCurrent.toLocaleDateString(\"pl-PL\")}\r\n          </div>\r\n          <div className=\"content\">\r\n            <h2>{WeatherAPIConf.API_CITY}</h2>\r\n            <div className=\"weatherData\">\r\n              <div class=\"temp\">{temperature + tempUnit}</div>\r\n              <div class=\"icon\">\r\n                <img src={getIcon(status)} />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div id=\"exampleCity\">{daysWeather()}</div>\r\n      </section>\r\n    </Layout>\r\n  );\r\n}\r\n\r\nexport default WeatherForcast;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}