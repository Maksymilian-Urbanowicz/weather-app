{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SUPER PC\\\\Desktop\\\\weather-app\\\\weather-app\\\\src\\\\scripts\\\\WeatherAPI.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from \"react\";\nimport { Chart } from \"chart.js\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_KEY = \"&appid=27e27f3b62720afb770645ec7ae89aa7\"; // Twój klucz API WeatherAPI\nconst API_URL = \"https://api.weatherapi.com/v1/forecast.json\";\nconst WeatherHourlyChart = _ref => {\n  _s();\n  let {\n    city\n  } = _ref;\n  const chartRef = useRef(null);\n  useEffect(() => {\n    let chartInstance = null;\n    const fetchWeatherData = async () => {\n      try {\n        const response = await axios.get(`${API_URL}?key=${API_KEY}&q=${city}&days=1&aqi=no&alerts=no&hour=24`);\n        const data = response.data;\n\n        // Przetwarzanie danych godzinowej prognozy pogody\n        const hourlyForecast = data.forecast.forecastday[0].hour.map(item => ({\n          time: item.time,\n          // Czas\n          temperature: item.temp_c // Temperatura w stopniach Celsiusza\n          // Dodaj inne niezbędne informacje\n        }));\n\n        generateChart(hourlyForecast);\n      } catch (error) {\n        console.error(\"Błąd pobierania prognozy pogody:\", error);\n      }\n    };\n    const generateChart = hourlyData => {\n      const labels = hourlyData.map(item => item.time);\n      const temperatures = hourlyData.map(item => item.temperature);\n      const ctx = chartRef.current.getContext(\"2d\");\n      chartInstance = new Chart(ctx, {\n        type: \"line\",\n        data: {\n          labels: labels,\n          datasets: [{\n            label: \"Temperatura (°C)\",\n            data: temperatures,\n            borderColor: \"blue\",\n            backgroundColor: \"rgba(0, 0, 255, 0.2)\",\n            fill: true\n          }]\n        },\n        options: {\n          responsive: true,\n          scales: {\n            y: {\n              beginAtZero: true\n            }\n          }\n        }\n      });\n    };\n    fetchWeatherData();\n    return () => {\n      // Zniszczenie instancji wykresu przy czyszczeniu komponentu\n      if (chartInstance) {\n        chartInstance.destroy();\n      }\n    };\n  }, [city]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: chartRef,\n    width: \"400\",\n    height: \"200\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 10\n  }, this);\n};\n_s(WeatherHourlyChart, \"X+1SfQQ6xefXNU27aQW843M7cTw=\");\n_c = WeatherHourlyChart;\nexport default WeatherHourlyChart;\nvar _c;\n$RefreshReg$(_c, \"WeatherHourlyChart\");","map":{"version":3,"names":["React","useRef","useEffect","Chart","axios","jsxDEV","_jsxDEV","API_KEY","API_URL","WeatherHourlyChart","_ref","_s","city","chartRef","chartInstance","fetchWeatherData","response","get","data","hourlyForecast","forecast","forecastday","hour","map","item","time","temperature","temp_c","generateChart","error","console","hourlyData","labels","temperatures","ctx","current","getContext","type","datasets","label","borderColor","backgroundColor","fill","options","responsive","scales","y","beginAtZero","destroy","ref","width","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/SUPER PC/Desktop/weather-app/weather-app/src/scripts/WeatherAPI.js"],"sourcesContent":["import React, { useRef, useEffect } from \"react\";\r\nimport { Chart } from \"chart.js\";\r\nimport axios from \"axios\";\r\n\r\nconst API_KEY = \"&appid=27e27f3b62720afb770645ec7ae89aa7\";// Twój klucz API WeatherAPI\r\nconst API_URL = \"https://api.weatherapi.com/v1/forecast.json\";\r\n\r\nconst WeatherHourlyChart = ({ city }) => {\r\n  const chartRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    let chartInstance = null;\r\n\r\n    const fetchWeatherData = async () => {\r\n      try {\r\n        const response = await axios.get(\r\n          `${API_URL}?key=${API_KEY}&q=${city}&days=1&aqi=no&alerts=no&hour=24`\r\n        );\r\n        const data = response.data;\r\n\r\n        // Przetwarzanie danych godzinowej prognozy pogody\r\n        const hourlyForecast = data.forecast.forecastday[0].hour.map(\r\n          (item) => ({\r\n            time: item.time, // Czas\r\n            temperature: item.temp_c, // Temperatura w stopniach Celsiusza\r\n            // Dodaj inne niezbędne informacje\r\n          })\r\n        );\r\n\r\n        generateChart(hourlyForecast);\r\n      } catch (error) {\r\n        console.error(\"Błąd pobierania prognozy pogody:\", error);\r\n      }\r\n    };\r\n\r\n    const generateChart = (hourlyData) => {\r\n      const labels = hourlyData.map((item) => item.time);\r\n      const temperatures = hourlyData.map((item) => item.temperature);\r\n\r\n      const ctx = chartRef.current.getContext(\"2d\");\r\n      chartInstance = new Chart(ctx, {\r\n        type: \"line\",\r\n        data: {\r\n          labels: labels,\r\n          datasets: [\r\n            {\r\n              label: \"Temperatura (°C)\",\r\n              data: temperatures,\r\n              borderColor: \"blue\",\r\n              backgroundColor: \"rgba(0, 0, 255, 0.2)\",\r\n              fill: true,\r\n            },\r\n          ],\r\n        },\r\n        options: {\r\n          responsive: true,\r\n          scales: {\r\n            y: {\r\n              beginAtZero: true,\r\n            },\r\n          },\r\n        },\r\n      });\r\n    };\r\n\r\n    fetchWeatherData();\r\n\r\n    return () => {\r\n      // Zniszczenie instancji wykresu przy czyszczeniu komponentu\r\n      if (chartInstance) {\r\n        chartInstance.destroy();\r\n      }\r\n    };\r\n  }, [city]);\r\n\r\n  return <canvas ref={chartRef} width=\"400\" height=\"200\" />;\r\n};\r\n\r\nexport default WeatherHourlyChart;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAChD,SAASC,KAAK,QAAQ,UAAU;AAChC,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,OAAO,GAAG,yCAAyC,CAAC;AAC1D,MAAMC,OAAO,GAAG,6CAA6C;AAE7D,MAAMC,kBAAkB,GAAGC,IAAA,IAAc;EAAAC,EAAA;EAAA,IAAb;IAAEC;EAAK,CAAC,GAAAF,IAAA;EAClC,MAAMG,QAAQ,GAAGZ,MAAM,CAAC,IAAI,CAAC;EAE7BC,SAAS,CAAC,MAAM;IACd,IAAIY,aAAa,GAAG,IAAI;IAExB,MAAMC,gBAAgB,GAAG,MAAAA,CAAA,KAAY;MACnC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMZ,KAAK,CAACa,GAAG,CAC7B,GAAET,OAAQ,QAAOD,OAAQ,MAAKK,IAAK,kCACtC,CAAC;QACD,MAAMM,IAAI,GAAGF,QAAQ,CAACE,IAAI;;QAE1B;QACA,MAAMC,cAAc,GAAGD,IAAI,CAACE,QAAQ,CAACC,WAAW,CAAC,CAAC,CAAC,CAACC,IAAI,CAACC,GAAG,CACzDC,IAAI,KAAM;UACTC,IAAI,EAAED,IAAI,CAACC,IAAI;UAAE;UACjBC,WAAW,EAAEF,IAAI,CAACG,MAAM,CAAE;UAC1B;QACF,CAAC,CACH,CAAC;;QAEDC,aAAa,CAACT,cAAc,CAAC;MAC/B,CAAC,CAAC,OAAOU,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;MAC1D;IACF,CAAC;IAED,MAAMD,aAAa,GAAIG,UAAU,IAAK;MACpC,MAAMC,MAAM,GAAGD,UAAU,CAACR,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACC,IAAI,CAAC;MAClD,MAAMQ,YAAY,GAAGF,UAAU,CAACR,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACE,WAAW,CAAC;MAE/D,MAAMQ,GAAG,GAAGrB,QAAQ,CAACsB,OAAO,CAACC,UAAU,CAAC,IAAI,CAAC;MAC7CtB,aAAa,GAAG,IAAIX,KAAK,CAAC+B,GAAG,EAAE;QAC7BG,IAAI,EAAE,MAAM;QACZnB,IAAI,EAAE;UACJc,MAAM,EAAEA,MAAM;UACdM,QAAQ,EAAE,CACR;YACEC,KAAK,EAAE,kBAAkB;YACzBrB,IAAI,EAAEe,YAAY;YAClBO,WAAW,EAAE,MAAM;YACnBC,eAAe,EAAE,sBAAsB;YACvCC,IAAI,EAAE;UACR,CAAC;QAEL,CAAC;QACDC,OAAO,EAAE;UACPC,UAAU,EAAE,IAAI;UAChBC,MAAM,EAAE;YACNC,CAAC,EAAE;cACDC,WAAW,EAAE;YACf;UACF;QACF;MACF,CAAC,CAAC;IACJ,CAAC;IAEDhC,gBAAgB,CAAC,CAAC;IAElB,OAAO,MAAM;MACX;MACA,IAAID,aAAa,EAAE;QACjBA,aAAa,CAACkC,OAAO,CAAC,CAAC;MACzB;IACF,CAAC;EACH,CAAC,EAAE,CAACpC,IAAI,CAAC,CAAC;EAEV,oBAAON,OAAA;IAAQ2C,GAAG,EAAEpC,QAAS;IAACqC,KAAK,EAAC,KAAK;IAACC,MAAM,EAAC;EAAK;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAC3D,CAAC;AAAC5C,EAAA,CArEIF,kBAAkB;AAAA+C,EAAA,GAAlB/C,kBAAkB;AAuExB,eAAeA,kBAAkB;AAAC,IAAA+C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}