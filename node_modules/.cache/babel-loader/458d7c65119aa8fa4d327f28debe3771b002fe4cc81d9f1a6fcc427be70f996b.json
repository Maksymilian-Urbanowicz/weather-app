{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SUPER PC\\\\Desktop\\\\weather-app\\\\weather-app\\\\src\\\\pages\\\\WeatherForcast.js\",\n  _s = $RefreshSig$();\nimport logo from \"../img/logo2.png\";\nimport sun from \"../img/weather-icons/sun.png\";\nimport \"../App.css\";\nimport \"../styles/WeatherForcast-style.css\";\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { Link } from \"react-router-dom\";\nimport WeatherAPI from \"../scripts/WeatherAPI\";\nimport Layout from \"../layout/layout\";\nimport WeatherAPIConf from \"../scripts/WeatherAPIConf\";\nimport iconThunderstorm from \"../img/weather-icons/thunderstorm.png\";\nimport iconDizzle from \"../img/weather-icons/drizzle.png\";\nimport iconRain from \"../img/weather-icons/rain.png\";\nimport iconIce from \"../img/weather-icons/ice.png\";\nimport iconUnknown from \"../img/weather-icons/unknown.png\";\nimport iconFog from \"../img/weather-icons/fog.png\";\nimport iconSun from \"../img/weather-icons/sun.png\";\nimport iconCloud from \"../img/weather-icons/cloud.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction WeatherForcast(_ref) {\n  _s();\n  let {\n    data\n  } = _ref;\n  //const { cityName, unitsData } = null;\n  const [temperature, setTemperature] = useState(null);\n  const [status, setStatus] = useState(null);\n  const [allWeather, setAllWeather] = useState(\"\");\n  const city = data.cityName || \"Gdańsk\";\n  const units = data.units || false;\n  WeatherAPIConf.API_FORMAT = \"forecast\";\n  WeatherAPIConf.API_CITY = city;\n  WeatherAPIConf.API_UNITS = units === false ? \"&units=metric\" : \"&units=imperial\";\n  let tempUnit = units === false ? \"°C\" : \"°F\";\n  let dateCurrent = new Date();\n  useEffect(() => {\n    const API_URL = WeatherAPIConf.API_LINK + WeatherAPIConf.API_FORMAT + WeatherAPIConf.API_CITYQ + WeatherAPIConf.API_CITY + WeatherAPIConf.API_UNITS + WeatherAPIConf.API_KEY;\n    let tabWeek = [];\n    console.log(API_URL);\n    axios.get(API_URL).then(res => {\n      for (let i = 0; i < 40; i++) {\n        let date = res.data.list[i].dt_txt;\n        let [datePart, timePart] = date.split(\" \");\n        let temperature = res.data.list[i].main[\"temp\"];\n        let pressure = res.data.list[i].main[\"pressure\"];\n        let humidity = res.data.list[i].main[\"humidity\"];\n        let status = res.data.list[i].weather[0][\"id\"];\n        tabWeek.push([datePart, timePart, temperature, pressure, humidity, status]);\n\n        // return (\n        //   <div className=\"App-panel2\">\n        //     <h3>{date}</h3>\n        //     <div className=\"weatherData2\">\n        //       <p>\n        //         {temperature}\n        //         {tempUnit}\n        //       </p>\n        //     </div>\n        //     <div className=\"icon2\">\n        //       <img src={getIcon(status)} alt=\"sun\" className=\"App-icon\" />\n        //     </div>\n        //   </div>\n        // );\n      }\n\n      setTemperature(Math.round(tabWeek[0][2]));\n      setStatus(tabWeek[0][5]);\n      console.log(tabWeek);\n      const jsonAll = JSON.stringify(tabWeek);\n      setAllWeather(jsonAll);\n    }).catch(error => {\n      //console.error(\"Błąd pobierania prognozy pogody:\", error);\n    });\n    let allWeather2 = JSON.parse(allWeather);\n    containerWeather(\"App-panel2\");\n    // for (let i = 0; i < 40; i++) {\n    //   containerWeather();\n    // }\n  });\n\n  const getIcon = statusCode => {\n    if (statusCode >= 200 && statusCode < 300) {\n      return iconThunderstorm;\n    } else if (statusCode >= 300 && statusCode < 400) {\n      return iconDizzle;\n    } else if (statusCode >= 500 && statusCode < 600) {\n      return iconRain;\n    } else if (statusCode >= 600 && statusCode < 700) {\n      return iconIce;\n    } else if (statusCode >= 700 && statusCode < 800) {\n      return iconFog;\n    } else if (statusCode == 800) {\n      return iconSun;\n    } else if (statusCode > 800 && statusCode < 900) {\n      return iconCloud;\n    }\n  };\n  const containerWeather = () => {\n    console.log(\" \");\n    if (allWeather != null) {\n      let allDatas = JSON.parse(allWeather);\n      const groupedData = allDatas.reduce((groups, item) => {\n        const key = item[0]; // Klucz główny - pierwszy element w tablicy\n        if (!groups[key]) {\n          groups[key] = []; // Tworzenie nowej grupy, jeśli jeszcze nie istnieje\n        }\n\n        groups[key].push(item.slice(1)); // Dodawanie reszty elementów do grupy\n        return groups;\n      }, {});\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: allDatas.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"App-panel2\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: item[1]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"weatherData2\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [item[2], tempUnit]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"icon2\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: getIcon(item[5]),\n              alt: \"sun\",\n              className: \"App-icon\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    children: /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"App-panel\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"date\",\n          children: [dateCurrent.toString().split(\" \")[0] + \" \", dateCurrent.toLocaleDateString(\"pl-PL\")]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"content\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: WeatherAPIConf.API_CITY\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"weatherData\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              class: \"temp\",\n              children: temperature + tempUnit\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              class: \"icon\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: getIcon(status)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 162,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 161,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"exampleCity\",\n        children: containerWeather()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 5\n  }, this);\n}\n_s(WeatherForcast, \"yn9wXJAA6SqREMu/QZF4NTuyxu4=\");\n_c = WeatherForcast;\nexport default WeatherForcast;\nvar _c;\n$RefreshReg$(_c, \"WeatherForcast\");","map":{"version":3,"names":["logo","sun","React","useEffect","useState","axios","Link","WeatherAPI","Layout","WeatherAPIConf","iconThunderstorm","iconDizzle","iconRain","iconIce","iconUnknown","iconFog","iconSun","iconCloud","jsxDEV","_jsxDEV","WeatherForcast","_ref","_s","data","temperature","setTemperature","status","setStatus","allWeather","setAllWeather","city","cityName","units","API_FORMAT","API_CITY","API_UNITS","tempUnit","dateCurrent","Date","API_URL","API_LINK","API_CITYQ","API_KEY","tabWeek","console","log","get","then","res","i","date","list","dt_txt","datePart","timePart","split","main","pressure","humidity","weather","push","Math","round","jsonAll","JSON","stringify","catch","error","allWeather2","parse","containerWeather","getIcon","statusCode","allDatas","groupedData","reduce","groups","item","key","slice","children","map","index","className","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","toString","toLocaleDateString","class","id","_c","$RefreshReg$"],"sources":["C:/Users/SUPER PC/Desktop/weather-app/weather-app/src/pages/WeatherForcast.js"],"sourcesContent":["import logo from \"../img/logo2.png\";\r\nimport sun from \"../img/weather-icons/sun.png\";\r\nimport \"../App.css\";\r\nimport \"../styles/WeatherForcast-style.css\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Link } from \"react-router-dom\";\r\nimport WeatherAPI from \"../scripts/WeatherAPI\";\r\nimport Layout from \"../layout/layout\";\r\nimport WeatherAPIConf from \"../scripts/WeatherAPIConf\";\r\nimport iconThunderstorm from \"../img/weather-icons/thunderstorm.png\";\r\nimport iconDizzle from \"../img/weather-icons/drizzle.png\";\r\nimport iconRain from \"../img/weather-icons/rain.png\";\r\nimport iconIce from \"../img/weather-icons/ice.png\";\r\nimport iconUnknown from \"../img/weather-icons/unknown.png\";\r\nimport iconFog from \"../img/weather-icons/fog.png\";\r\nimport iconSun from \"../img/weather-icons/sun.png\";\r\nimport iconCloud from \"../img/weather-icons/cloud.png\";\r\n\r\nfunction WeatherForcast({ data }) {\r\n  //const { cityName, unitsData } = null;\r\n  const [temperature, setTemperature] = useState(null);\r\n  const [status, setStatus] = useState(null);\r\n  const [allWeather, setAllWeather] = useState(\"\");\r\n\r\n  const city = data.cityName || \"Gdańsk\";\r\n  const units = data.units || false;\r\n  WeatherAPIConf.API_FORMAT = \"forecast\";\r\n  WeatherAPIConf.API_CITY = city;\r\n  WeatherAPIConf.API_UNITS =\r\n    units === false ? \"&units=metric\" : \"&units=imperial\";\r\n\r\n  let tempUnit = units === false ? \"°C\" : \"°F\";\r\n  let dateCurrent = new Date();\r\n\r\n  useEffect(() => {\r\n    const API_URL =\r\n      WeatherAPIConf.API_LINK +\r\n      WeatherAPIConf.API_FORMAT +\r\n      WeatherAPIConf.API_CITYQ +\r\n      WeatherAPIConf.API_CITY +\r\n      WeatherAPIConf.API_UNITS +\r\n      WeatherAPIConf.API_KEY;\r\n\r\n    let tabWeek = [];\r\n    console.log(API_URL);\r\n    axios\r\n      .get(API_URL)\r\n      .then((res) => {\r\n        for (let i = 0; i < 40; i++) {\r\n          let date = res.data.list[i].dt_txt;\r\n          let [datePart, timePart] = date.split(\" \");\r\n          let temperature = res.data.list[i].main[\"temp\"];\r\n          let pressure = res.data.list[i].main[\"pressure\"];\r\n          let humidity = res.data.list[i].main[\"humidity\"];\r\n          let status = res.data.list[i].weather[0][\"id\"];\r\n          tabWeek.push([\r\n            datePart,\r\n            timePart,\r\n            temperature,\r\n            pressure,\r\n            humidity,\r\n            status,\r\n          ]);\r\n\r\n          // return (\r\n          //   <div className=\"App-panel2\">\r\n          //     <h3>{date}</h3>\r\n          //     <div className=\"weatherData2\">\r\n          //       <p>\r\n          //         {temperature}\r\n          //         {tempUnit}\r\n          //       </p>\r\n          //     </div>\r\n          //     <div className=\"icon2\">\r\n          //       <img src={getIcon(status)} alt=\"sun\" className=\"App-icon\" />\r\n          //     </div>\r\n          //   </div>\r\n          // );\r\n        }\r\n        setTemperature(Math.round(tabWeek[0][2]));\r\n        setStatus(tabWeek[0][5]);\r\n        console.log(tabWeek);\r\n        const jsonAll = JSON.stringify(tabWeek);\r\n        setAllWeather(jsonAll);\r\n      })\r\n      .catch((error) => {\r\n        //console.error(\"Błąd pobierania prognozy pogody:\", error);\r\n      });\r\n\r\n    let allWeather2 = JSON.parse(allWeather);\r\n    containerWeather(\"App-panel2\");\r\n    // for (let i = 0; i < 40; i++) {\r\n    //   containerWeather();\r\n    // }\r\n  });\r\n\r\n  const getIcon = (statusCode) => {\r\n    if (statusCode >= 200 && statusCode < 300) {\r\n      return iconThunderstorm;\r\n    } else if (statusCode >= 300 && statusCode < 400) {\r\n      return iconDizzle;\r\n    } else if (statusCode >= 500 && statusCode < 600) {\r\n      return iconRain;\r\n    } else if (statusCode >= 600 && statusCode < 700) {\r\n      return iconIce;\r\n    } else if (statusCode >= 700 && statusCode < 800) {\r\n      return iconFog;\r\n    } else if (statusCode == 800) {\r\n      return iconSun;\r\n    } else if (statusCode > 800 && statusCode < 900) {\r\n      return iconCloud;\r\n    }\r\n  };\r\n\r\n  const containerWeather = () => {\r\n    console.log(\" \");\r\n    if (allWeather != null) {\r\n      let allDatas = JSON.parse(allWeather);\r\n      const groupedData = allDatas.reduce((groups, item) => {\r\n        const key = item[0]; // Klucz główny - pierwszy element w tablicy\r\n        if (!groups[key]) {\r\n          groups[key] = []; // Tworzenie nowej grupy, jeśli jeszcze nie istnieje\r\n        }\r\n        groups[key].push(item.slice(1)); // Dodawanie reszty elementów do grupy\r\n        return groups;\r\n      }, {});\r\n      return (\r\n        <div>\r\n          {allDatas.map((item, index) => (\r\n            <div className=\"App-panel2\">\r\n              <h3>{item[1]}</h3>\r\n              <div className=\"weatherData2\">\r\n                <p>\r\n                  {item[2]}\r\n                  {tempUnit}\r\n                </p>\r\n              </div>\r\n              <div className=\"icon2\">\r\n                <img src={getIcon(item[5])} alt=\"sun\" className=\"App-icon\" />\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Layout>\r\n      <section>\r\n        <div className=\"App-panel\">\r\n          <div className=\"date\">\r\n            {dateCurrent.toString().split(\" \")[0] + \" \"}\r\n            {dateCurrent.toLocaleDateString(\"pl-PL\")}\r\n          </div>\r\n          <div className=\"content\">\r\n            <h2>{WeatherAPIConf.API_CITY}</h2>\r\n            <div className=\"weatherData\">\r\n              <div class=\"temp\">{temperature + tempUnit}</div>\r\n              <div class=\"icon\">\r\n                <img src={getIcon(status)} />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div id=\"exampleCity\">{containerWeather()}</div>\r\n      </section>\r\n    </Layout>\r\n  );\r\n}\r\n\r\nexport default WeatherForcast;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}