{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SUPER PC\\\\Desktop\\\\weather-app\\\\weather-app\\\\src\\\\pages\\\\WeatherForcast.js\",\n  _s = $RefreshSig$();\nimport logo from \"../img/logo2.png\";\nimport sun from \"../img/weather-icons/sun.png\";\nimport \"../App.css\";\nimport \"../styles/WeatherForcast-style.css\";\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { Link } from \"react-router-dom\";\nimport WeatherAPI from \"../scripts/WeatherAPI\";\nimport Layout from \"../layout/layout\";\nimport WeatherAPIConf from \"../scripts/WeatherAPIConf\";\nimport iconThunderstorm from \"../img/weather-icons/thunderstorm.png\";\nimport iconDizzle from \"../img/weather-icons/drizzle.png\";\nimport iconRain from \"../img/weather-icons/rain.png\";\nimport iconIce from \"../img/weather-icons/ice.png\";\nimport iconUnknown from \"../img/weather-icons/unknown.png\";\nimport iconFog from \"../img/weather-icons/fog.png\";\nimport iconSun from \"../img/weather-icons/sun.png\";\nimport iconCloud from \"../img/weather-icons/cloud.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction WeatherForcast(_ref) {\n  _s();\n  let {\n    data\n  } = _ref;\n  //const { cityName, unitsData } = null;\n  const [temperature, setTemperature] = useState(null);\n  const [status, setStatus] = useState(null);\n  const [allWeather, setAllWeather] = useState(\"\");\n  const city = data.cityName || \"Gdańsk\";\n  const units = data.units || false;\n  WeatherAPIConf.API_FORMAT = \"forecast\";\n  WeatherAPIConf.API_CITY = city;\n  WeatherAPIConf.API_UNITS = units === false ? \"&units=metric\" : \"&units=imperial\";\n  let tempUnit = units === false ? \"°C\" : \"°F\";\n  let dateCurrent = new Date();\n  useEffect(() => {\n    const API_URL = WeatherAPIConf.API_LINK + WeatherAPIConf.API_FORMAT + WeatherAPIConf.API_CITYQ + WeatherAPIConf.API_CITY + WeatherAPIConf.API_UNITS + WeatherAPIConf.API_KEY;\n    let tabWeek = [];\n    console.log(API_URL);\n    axios.get(API_URL).then(res => {\n      for (let i = 0; i < 40; i++) {\n        let date = res.data.list[i].dt_txt;\n        let [datePart, timePart] = date.split(\" \");\n        let temperature = res.data.list[i].main[\"temp\"];\n        let pressure = res.data.list[i].main[\"pressure\"];\n        let humidity = res.data.list[i].main[\"humidity\"];\n        let status = res.data.list[i].weather[0][\"id\"];\n        tabWeek.push([datePart, timePart, temperature, pressure, humidity, status]);\n\n        // return (\n        //   <div className=\"App-panel2\">\n        //     <h3>{date}</h3>\n        //     <div className=\"weatherData2\">\n        //       <p>\n        //         {temperature}\n        //         {tempUnit}\n        //       </p>\n        //     </div>\n        //     <div className=\"icon2\">\n        //       <img src={getIcon(status)} alt=\"sun\" className=\"App-icon\" />\n        //     </div>\n        //   </div>\n        // );\n      }\n\n      setTemperature(Math.round(tabWeek[0][2]));\n      setStatus(tabWeek[0][5]);\n      console.log(tabWeek);\n      const jsonAll = JSON.stringify(tabWeek);\n      setAllWeather(jsonAll);\n    }).catch(error => {\n      //console.error(\"Błąd pobierania prognozy pogody:\", error);\n    });\n\n    //let allWeather2 = JSON.parse(allWeather);\n    //containerWeather(\"App-panel2\");\n    // for (let i = 0; i < 40; i++) {\n    //   containerWeather();\n    // }\n  });\n\n  const getIcon = statusCode => {\n    if (statusCode >= 200 && statusCode < 300) {\n      return iconThunderstorm;\n    } else if (statusCode >= 300 && statusCode < 400) {\n      return iconDizzle;\n    } else if (statusCode >= 500 && statusCode < 600) {\n      return iconRain;\n    } else if (statusCode >= 600 && statusCode < 700) {\n      return iconIce;\n    } else if (statusCode >= 700 && statusCode < 800) {\n      return iconFog;\n    } else if (statusCode == 800) {\n      return iconSun;\n    } else if (statusCode > 800 && statusCode < 900) {\n      return iconCloud;\n    }\n  };\n  const maxStatus = groupedData => {\n    let maxStatus = -Infinity;\n    Object.entries(groupedData).forEach(_ref2 => {\n      let [key, group] = _ref2;\n      group.forEach(item => {\n        const statusCurrent = item[5];\n        if (statusCurrent >= 200 && statusCurrent < 300 || (statusCurrent > 400 && statusCurrent < 700)(statusCurrent > 800 && statusCurrent < 900)) {\n          if (statusCurrent < maxStatus) maxStatus = statusCurrent;\n        }\n      });\n    });\n    return maxStatus;\n  };\n  const maxTemp = groupedData => {\n    let maxTemperature = -Infinity;\n    Object.entries(groupedData).forEach(_ref3 => {\n      let [key, group] = _ref3;\n      group.forEach(item => {\n        const temperature = item[1];\n        if (temperature > maxTemperature) {\n          maxTemperature = temperature;\n        }\n      });\n    });\n    return maxTemperature;\n  };\n  const minTemp = groupedData => {\n    let minTemperature = -Infinity;\n    Object.entries(groupedData).forEach(_ref4 => {\n      let [key, group] = _ref4;\n      group.forEach(item => {\n        const temperature = item[1];\n        if (temperature < minTemperature) {\n          minTemperature = temperature;\n        }\n      });\n    });\n    return minTemperature;\n  };\n  const containerWeather = option => {\n    // console.log(\" \");\n    // if (allWeather != null) {\n    //   let allDatas = JSON.parse(allWeather);\n    //   const groupedData = allDatas.reduce((groups, item) => {\n    //     const key = item[0]; // Klucz główny - pierwszy element w tablicy\n    //     if (!groups[key]) {\n    //       groups[key] = []; // Tworzenie nowej grupy, jeśli jeszcze nie istnieje\n    //     }\n    //     groups[key].push(item.slice(1)); // Dodawanie reszty elementów do grupy\n    //     //console.log(groups)\n    //     return groups;\n    //   }, {});\n\n    //   if (option === true) {\n    //     console.log(groupedData);\n    //     return (\n    //       <div id=\"weatherDetails\">\n    //         {Object.entries(groupedData).map(([key, group]) => (\n    //           <div key={key} className=\"App-panel-group\">\n    //             <h2 className=\"App-panel3\">{key}</h2>\n    //             {group.map((item, index) => (\n    //               <div key={index} className=\"App-panel2\">\n    //                 <div class=\"hours\">\n    //                   <h3>{item[0].toString().slice(0, 5)}</h3>\n    //                 </div>\n    //                 <div className=\"weatherData2\">\n    //                   {Math.round(item[1])}\n    //                   {tempUnit}\n    //                 </div>\n    //                 <div className=\"icon2\">\n    //                   <img\n    //                     src={getIcon(item[4])}\n    //                     alt=\"sun\"\n    //                     className=\"App-icon\"\n    //                   />\n    //                 </div>\n    //               </div>\n    //             ))}\n    //           </div>\n    //         ))}\n    //       </div>\n    //     );\n    //   } else {\n    //     return (\n    //       <div id=\"weatherDetails\">\n    //         {Object.entries(groupedData).map(([key, group]) => (\n    //           <div key={key} className=\"App-panel-group\">\n    //             <h2 className=\"App-panel3\">{key}</h2>\n    //             <div className=\"App-panel2\">\n    //               <div className=\"weatherData2\">\n    //                 {Math.round(maxTemp(groupedData, key)) +\n    //                   \"/\" +\n    //                   Math.round(minTemp(groupedData, key))}\n    //                 {tempUnit}\n    //               </div>\n    //               <div className=\"icon2\">\n    //                 <img\n    //                   src={getIcon(maxStatus(groupedData, key))}\n    //                   alt=\"sun\"\n    //                   className=\"App-icon\"\n    //                 />\n    //               </div>\n    //             </div>\n    //           </div>\n    //         ))}\n    //       </div>\n    //     );\n    //   }\n    // }\n  };\n  const handleClick1 = () => {\n    console.log(\"Przycisk został kliknięty!\");\n    // Dodaj tutaj swoje działania po kliknięciu przycisku\n  };\n\n  const handleClick2 = () => {\n    console.log(\"Przycisk został kliknięty!\");\n    // Dodaj tutaj swoje działania po kliknięciu przycisku\n  };\n\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    children: /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"App-panel\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"date\",\n          children: [dateCurrent.toString().split(\" \")[0] + \" \", dateCurrent.toLocaleDateString(\"pl-PL\")]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"content\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: WeatherAPIConf.API_CITY\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 254,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"weatherData\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              class: \"temp\",\n              children: temperature + tempUnit\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 256,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              class: \"icon\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: getIcon(status)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 258,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 257,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"App-panel-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleClick1,\n          children: \"pogoda godzinowa po godzinie\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: {\n            handleClick2\n          },\n          children: \"pogoda najbli\\u017Csze na 5 dni\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 9\n      }, this), containerWeather(false)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 246,\n    columnNumber: 5\n  }, this);\n}\n_s(WeatherForcast, \"yn9wXJAA6SqREMu/QZF4NTuyxu4=\");\n_c = WeatherForcast;\nexport default WeatherForcast;\nvar _c;\n$RefreshReg$(_c, \"WeatherForcast\");","map":{"version":3,"names":["logo","sun","React","useEffect","useState","axios","Link","WeatherAPI","Layout","WeatherAPIConf","iconThunderstorm","iconDizzle","iconRain","iconIce","iconUnknown","iconFog","iconSun","iconCloud","jsxDEV","_jsxDEV","WeatherForcast","_ref","_s","data","temperature","setTemperature","status","setStatus","allWeather","setAllWeather","city","cityName","units","API_FORMAT","API_CITY","API_UNITS","tempUnit","dateCurrent","Date","API_URL","API_LINK","API_CITYQ","API_KEY","tabWeek","console","log","get","then","res","i","date","list","dt_txt","datePart","timePart","split","main","pressure","humidity","weather","push","Math","round","jsonAll","JSON","stringify","catch","error","getIcon","statusCode","maxStatus","groupedData","Infinity","Object","entries","forEach","_ref2","key","group","item","statusCurrent","maxTemp","maxTemperature","_ref3","minTemp","minTemperature","_ref4","containerWeather","option","handleClick1","handleClick2","children","className","toString","toLocaleDateString","fileName","_jsxFileName","lineNumber","columnNumber","class","src","onClick","_c","$RefreshReg$"],"sources":["C:/Users/SUPER PC/Desktop/weather-app/weather-app/src/pages/WeatherForcast.js"],"sourcesContent":["import logo from \"../img/logo2.png\";\r\nimport sun from \"../img/weather-icons/sun.png\";\r\nimport \"../App.css\";\r\nimport \"../styles/WeatherForcast-style.css\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Link } from \"react-router-dom\";\r\nimport WeatherAPI from \"../scripts/WeatherAPI\";\r\nimport Layout from \"../layout/layout\";\r\nimport WeatherAPIConf from \"../scripts/WeatherAPIConf\";\r\nimport iconThunderstorm from \"../img/weather-icons/thunderstorm.png\";\r\nimport iconDizzle from \"../img/weather-icons/drizzle.png\";\r\nimport iconRain from \"../img/weather-icons/rain.png\";\r\nimport iconIce from \"../img/weather-icons/ice.png\";\r\nimport iconUnknown from \"../img/weather-icons/unknown.png\";\r\nimport iconFog from \"../img/weather-icons/fog.png\";\r\nimport iconSun from \"../img/weather-icons/sun.png\";\r\nimport iconCloud from \"../img/weather-icons/cloud.png\";\r\n\r\nfunction WeatherForcast({ data }) {\r\n  //const { cityName, unitsData } = null;\r\n  const [temperature, setTemperature] = useState(null);\r\n  const [status, setStatus] = useState(null);\r\n  const [allWeather, setAllWeather] = useState(\"\");\r\n\r\n  const city = data.cityName || \"Gdańsk\";\r\n  const units = data.units || false;\r\n  WeatherAPIConf.API_FORMAT = \"forecast\";\r\n  WeatherAPIConf.API_CITY = city;\r\n  WeatherAPIConf.API_UNITS =\r\n    units === false ? \"&units=metric\" : \"&units=imperial\";\r\n\r\n  let tempUnit = units === false ? \"°C\" : \"°F\";\r\n  let dateCurrent = new Date();\r\n\r\n  useEffect(() => {\r\n    const API_URL =\r\n      WeatherAPIConf.API_LINK +\r\n      WeatherAPIConf.API_FORMAT +\r\n      WeatherAPIConf.API_CITYQ +\r\n      WeatherAPIConf.API_CITY +\r\n      WeatherAPIConf.API_UNITS +\r\n      WeatherAPIConf.API_KEY;\r\n\r\n    let tabWeek = [];\r\n    console.log(API_URL);\r\n    axios\r\n      .get(API_URL)\r\n      .then((res) => {\r\n        for (let i = 0; i < 40; i++) {\r\n          let date = res.data.list[i].dt_txt;\r\n          let [datePart, timePart] = date.split(\" \");\r\n          let temperature = res.data.list[i].main[\"temp\"];\r\n          let pressure = res.data.list[i].main[\"pressure\"];\r\n          let humidity = res.data.list[i].main[\"humidity\"];\r\n          let status = res.data.list[i].weather[0][\"id\"];\r\n          tabWeek.push([\r\n            datePart,\r\n            timePart,\r\n            temperature,\r\n            pressure,\r\n            humidity,\r\n            status,\r\n          ]);\r\n\r\n          // return (\r\n          //   <div className=\"App-panel2\">\r\n          //     <h3>{date}</h3>\r\n          //     <div className=\"weatherData2\">\r\n          //       <p>\r\n          //         {temperature}\r\n          //         {tempUnit}\r\n          //       </p>\r\n          //     </div>\r\n          //     <div className=\"icon2\">\r\n          //       <img src={getIcon(status)} alt=\"sun\" className=\"App-icon\" />\r\n          //     </div>\r\n          //   </div>\r\n          // );\r\n        }\r\n        setTemperature(Math.round(tabWeek[0][2]));\r\n        setStatus(tabWeek[0][5]);\r\n        console.log(tabWeek);\r\n        const jsonAll = JSON.stringify(tabWeek);\r\n        setAllWeather(jsonAll);\r\n      })\r\n      .catch((error) => {\r\n        //console.error(\"Błąd pobierania prognozy pogody:\", error);\r\n      });\r\n\r\n    //let allWeather2 = JSON.parse(allWeather);\r\n    //containerWeather(\"App-panel2\");\r\n    // for (let i = 0; i < 40; i++) {\r\n    //   containerWeather();\r\n    // }\r\n  });\r\n\r\n  const getIcon = (statusCode) => {\r\n    if (statusCode >= 200 && statusCode < 300) {\r\n      return iconThunderstorm;\r\n    } else if (statusCode >= 300 && statusCode < 400) {\r\n      return iconDizzle;\r\n    } else if (statusCode >= 500 && statusCode < 600) {\r\n      return iconRain;\r\n    } else if (statusCode >= 600 && statusCode < 700) {\r\n      return iconIce;\r\n    } else if (statusCode >= 700 && statusCode < 800) {\r\n      return iconFog;\r\n    } else if (statusCode == 800) {\r\n      return iconSun;\r\n    } else if (statusCode > 800 && statusCode < 900) {\r\n      return iconCloud;\r\n    }\r\n  };\r\n\r\n  const maxStatus = (groupedData) => {\r\n    let maxStatus = -Infinity;\r\n\r\n    Object.entries(groupedData).forEach(([key, group]) => {\r\n      group.forEach((item) => {\r\n        const statusCurrent = item[5];\r\n        if (\r\n          (statusCurrent >= 200 && statusCurrent < 300) ||\r\n          (statusCurrent > 400 && statusCurrent < 700)(\r\n            statusCurrent > 800 && statusCurrent < 900\r\n          )\r\n        ) {\r\n          if (statusCurrent < maxStatus) maxStatus = statusCurrent;\r\n        } \r\n      });\r\n    });\r\n    return maxStatus;\r\n  };\r\n\r\n  const maxTemp = (groupedData) => {\r\n    let maxTemperature = -Infinity;\r\n\r\n    Object.entries(groupedData).forEach(([key, group]) => {\r\n      group.forEach((item) => {\r\n        const temperature = item[1];\r\n        if (temperature > maxTemperature) {\r\n          maxTemperature = temperature;\r\n        }\r\n      });\r\n    });\r\n    return maxTemperature;\r\n  };\r\n\r\n  const minTemp = (groupedData) => {\r\n    let minTemperature = -Infinity;\r\n\r\n    Object.entries(groupedData).forEach(([key, group]) => {\r\n      group.forEach((item) => {\r\n        const temperature = item[1];\r\n        if (temperature < minTemperature) {\r\n          minTemperature = temperature;\r\n        }\r\n      });\r\n    });\r\n    return minTemperature;\r\n  };\r\n\r\n  const containerWeather = (option) => {\r\n    // console.log(\" \");\r\n    // if (allWeather != null) {\r\n    //   let allDatas = JSON.parse(allWeather);\r\n    //   const groupedData = allDatas.reduce((groups, item) => {\r\n    //     const key = item[0]; // Klucz główny - pierwszy element w tablicy\r\n    //     if (!groups[key]) {\r\n    //       groups[key] = []; // Tworzenie nowej grupy, jeśli jeszcze nie istnieje\r\n    //     }\r\n    //     groups[key].push(item.slice(1)); // Dodawanie reszty elementów do grupy\r\n    //     //console.log(groups)\r\n    //     return groups;\r\n    //   }, {});\r\n\r\n    //   if (option === true) {\r\n    //     console.log(groupedData);\r\n    //     return (\r\n    //       <div id=\"weatherDetails\">\r\n    //         {Object.entries(groupedData).map(([key, group]) => (\r\n    //           <div key={key} className=\"App-panel-group\">\r\n    //             <h2 className=\"App-panel3\">{key}</h2>\r\n    //             {group.map((item, index) => (\r\n    //               <div key={index} className=\"App-panel2\">\r\n    //                 <div class=\"hours\">\r\n    //                   <h3>{item[0].toString().slice(0, 5)}</h3>\r\n    //                 </div>\r\n    //                 <div className=\"weatherData2\">\r\n    //                   {Math.round(item[1])}\r\n    //                   {tempUnit}\r\n    //                 </div>\r\n    //                 <div className=\"icon2\">\r\n    //                   <img\r\n    //                     src={getIcon(item[4])}\r\n    //                     alt=\"sun\"\r\n    //                     className=\"App-icon\"\r\n    //                   />\r\n    //                 </div>\r\n    //               </div>\r\n    //             ))}\r\n    //           </div>\r\n    //         ))}\r\n    //       </div>\r\n    //     );\r\n    //   } else {\r\n    //     return (\r\n    //       <div id=\"weatherDetails\">\r\n    //         {Object.entries(groupedData).map(([key, group]) => (\r\n    //           <div key={key} className=\"App-panel-group\">\r\n    //             <h2 className=\"App-panel3\">{key}</h2>\r\n    //             <div className=\"App-panel2\">\r\n    //               <div className=\"weatherData2\">\r\n    //                 {Math.round(maxTemp(groupedData, key)) +\r\n    //                   \"/\" +\r\n    //                   Math.round(minTemp(groupedData, key))}\r\n    //                 {tempUnit}\r\n    //               </div>\r\n    //               <div className=\"icon2\">\r\n    //                 <img\r\n    //                   src={getIcon(maxStatus(groupedData, key))}\r\n    //                   alt=\"sun\"\r\n    //                   className=\"App-icon\"\r\n    //                 />\r\n    //               </div>\r\n    //             </div>\r\n    //           </div>\r\n    //         ))}\r\n    //       </div>\r\n    //     );\r\n    //   }\r\n    // }\r\n  };\r\n\r\n  const handleClick1 = () => {\r\n    console.log(\"Przycisk został kliknięty!\");\r\n    // Dodaj tutaj swoje działania po kliknięciu przycisku\r\n  };\r\n\r\n  const handleClick2 = () => {\r\n    console.log(\"Przycisk został kliknięty!\");\r\n    // Dodaj tutaj swoje działania po kliknięciu przycisku\r\n  };\r\n\r\n  return (\r\n    <Layout>\r\n      <section>\r\n        <div className=\"App-panel\">\r\n          <div className=\"date\">\r\n            {dateCurrent.toString().split(\" \")[0] + \" \"}\r\n            {dateCurrent.toLocaleDateString(\"pl-PL\")}\r\n          </div>\r\n          <div className=\"content\">\r\n            <h2>{WeatherAPIConf.API_CITY}</h2>\r\n            <div className=\"weatherData\">\r\n              <div class=\"temp\">{temperature + tempUnit}</div>\r\n              <div class=\"icon\">\r\n                <img src={getIcon(status)} />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"App-panel-buttons\">\r\n          <button onClick={handleClick1}>pogoda godzinowa po godzinie</button>\r\n          <button onClick={{ handleClick2 }}>pogoda najbliższe na 5 dni</button>\r\n        </div>\r\n        {containerWeather(false)}\r\n      </section>\r\n    </Layout>\r\n  );\r\n}\r\n\r\nexport default WeatherForcast;\r\n"],"mappings":";;AAAA,OAAOA,IAAI,MAAM,kBAAkB;AACnC,OAAOC,GAAG,MAAM,8BAA8B;AAC9C,OAAO,YAAY;AACnB,OAAO,oCAAoC;AAC3C,OAAOC,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,IAAI,QAAQ,kBAAkB;AACvC,OAAOC,UAAU,MAAM,uBAAuB;AAC9C,OAAOC,MAAM,MAAM,kBAAkB;AACrC,OAAOC,cAAc,MAAM,2BAA2B;AACtD,OAAOC,gBAAgB,MAAM,uCAAuC;AACpE,OAAOC,UAAU,MAAM,kCAAkC;AACzD,OAAOC,QAAQ,MAAM,+BAA+B;AACpD,OAAOC,OAAO,MAAM,8BAA8B;AAClD,OAAOC,WAAW,MAAM,kCAAkC;AAC1D,OAAOC,OAAO,MAAM,8BAA8B;AAClD,OAAOC,OAAO,MAAM,8BAA8B;AAClD,OAAOC,SAAS,MAAM,gCAAgC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvD,SAASC,cAAcA,CAAAC,IAAA,EAAW;EAAAC,EAAA;EAAA,IAAV;IAAEC;EAAK,CAAC,GAAAF,IAAA;EAC9B;EACA,MAAM,CAACG,WAAW,EAAEC,cAAc,CAAC,GAAGrB,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACsB,MAAM,EAAEC,SAAS,CAAC,GAAGvB,QAAQ,CAAC,IAAI,CAAC;EAC1C,MAAM,CAACwB,UAAU,EAAEC,aAAa,CAAC,GAAGzB,QAAQ,CAAC,EAAE,CAAC;EAEhD,MAAM0B,IAAI,GAAGP,IAAI,CAACQ,QAAQ,IAAI,QAAQ;EACtC,MAAMC,KAAK,GAAGT,IAAI,CAACS,KAAK,IAAI,KAAK;EACjCvB,cAAc,CAACwB,UAAU,GAAG,UAAU;EACtCxB,cAAc,CAACyB,QAAQ,GAAGJ,IAAI;EAC9BrB,cAAc,CAAC0B,SAAS,GACtBH,KAAK,KAAK,KAAK,GAAG,eAAe,GAAG,iBAAiB;EAEvD,IAAII,QAAQ,GAAGJ,KAAK,KAAK,KAAK,GAAG,IAAI,GAAG,IAAI;EAC5C,IAAIK,WAAW,GAAG,IAAIC,IAAI,CAAC,CAAC;EAE5BnC,SAAS,CAAC,MAAM;IACd,MAAMoC,OAAO,GACX9B,cAAc,CAAC+B,QAAQ,GACvB/B,cAAc,CAACwB,UAAU,GACzBxB,cAAc,CAACgC,SAAS,GACxBhC,cAAc,CAACyB,QAAQ,GACvBzB,cAAc,CAAC0B,SAAS,GACxB1B,cAAc,CAACiC,OAAO;IAExB,IAAIC,OAAO,GAAG,EAAE;IAChBC,OAAO,CAACC,GAAG,CAACN,OAAO,CAAC;IACpBlC,KAAK,CACFyC,GAAG,CAACP,OAAO,CAAC,CACZQ,IAAI,CAAEC,GAAG,IAAK;MACb,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAE;QAC3B,IAAIC,IAAI,GAAGF,GAAG,CAACzB,IAAI,CAAC4B,IAAI,CAACF,CAAC,CAAC,CAACG,MAAM;QAClC,IAAI,CAACC,QAAQ,EAAEC,QAAQ,CAAC,GAAGJ,IAAI,CAACK,KAAK,CAAC,GAAG,CAAC;QAC1C,IAAI/B,WAAW,GAAGwB,GAAG,CAACzB,IAAI,CAAC4B,IAAI,CAACF,CAAC,CAAC,CAACO,IAAI,CAAC,MAAM,CAAC;QAC/C,IAAIC,QAAQ,GAAGT,GAAG,CAACzB,IAAI,CAAC4B,IAAI,CAACF,CAAC,CAAC,CAACO,IAAI,CAAC,UAAU,CAAC;QAChD,IAAIE,QAAQ,GAAGV,GAAG,CAACzB,IAAI,CAAC4B,IAAI,CAACF,CAAC,CAAC,CAACO,IAAI,CAAC,UAAU,CAAC;QAChD,IAAI9B,MAAM,GAAGsB,GAAG,CAACzB,IAAI,CAAC4B,IAAI,CAACF,CAAC,CAAC,CAACU,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;QAC9ChB,OAAO,CAACiB,IAAI,CAAC,CACXP,QAAQ,EACRC,QAAQ,EACR9B,WAAW,EACXiC,QAAQ,EACRC,QAAQ,EACRhC,MAAM,CACP,CAAC;;QAEF;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;MACF;;MACAD,cAAc,CAACoC,IAAI,CAACC,KAAK,CAACnB,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACzChB,SAAS,CAACgB,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACxBC,OAAO,CAACC,GAAG,CAACF,OAAO,CAAC;MACpB,MAAMoB,OAAO,GAAGC,IAAI,CAACC,SAAS,CAACtB,OAAO,CAAC;MACvCd,aAAa,CAACkC,OAAO,CAAC;IACxB,CAAC,CAAC,CACDG,KAAK,CAAEC,KAAK,IAAK;MAChB;IAAA,CACD,CAAC;;IAEJ;IACA;IACA;IACA;IACA;EACF,CAAC,CAAC;;EAEF,MAAMC,OAAO,GAAIC,UAAU,IAAK;IAC9B,IAAIA,UAAU,IAAI,GAAG,IAAIA,UAAU,GAAG,GAAG,EAAE;MACzC,OAAO3D,gBAAgB;IACzB,CAAC,MAAM,IAAI2D,UAAU,IAAI,GAAG,IAAIA,UAAU,GAAG,GAAG,EAAE;MAChD,OAAO1D,UAAU;IACnB,CAAC,MAAM,IAAI0D,UAAU,IAAI,GAAG,IAAIA,UAAU,GAAG,GAAG,EAAE;MAChD,OAAOzD,QAAQ;IACjB,CAAC,MAAM,IAAIyD,UAAU,IAAI,GAAG,IAAIA,UAAU,GAAG,GAAG,EAAE;MAChD,OAAOxD,OAAO;IAChB,CAAC,MAAM,IAAIwD,UAAU,IAAI,GAAG,IAAIA,UAAU,GAAG,GAAG,EAAE;MAChD,OAAOtD,OAAO;IAChB,CAAC,MAAM,IAAIsD,UAAU,IAAI,GAAG,EAAE;MAC5B,OAAOrD,OAAO;IAChB,CAAC,MAAM,IAAIqD,UAAU,GAAG,GAAG,IAAIA,UAAU,GAAG,GAAG,EAAE;MAC/C,OAAOpD,SAAS;IAClB;EACF,CAAC;EAED,MAAMqD,SAAS,GAAIC,WAAW,IAAK;IACjC,IAAID,SAAS,GAAG,CAACE,QAAQ;IAEzBC,MAAM,CAACC,OAAO,CAACH,WAAW,CAAC,CAACI,OAAO,CAACC,KAAA,IAAkB;MAAA,IAAjB,CAACC,GAAG,EAAEC,KAAK,CAAC,GAAAF,KAAA;MAC/CE,KAAK,CAACH,OAAO,CAAEI,IAAI,IAAK;QACtB,MAAMC,aAAa,GAAGD,IAAI,CAAC,CAAC,CAAC;QAC7B,IACGC,aAAa,IAAI,GAAG,IAAIA,aAAa,GAAG,GAAG,IAC5C,CAACA,aAAa,GAAG,GAAG,IAAIA,aAAa,GAAG,GAAG,EACzCA,aAAa,GAAG,GAAG,IAAIA,aAAa,GAAG,GACzC,CAAC,EACD;UACA,IAAIA,aAAa,GAAGV,SAAS,EAAEA,SAAS,GAAGU,aAAa;QAC1D;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;IACF,OAAOV,SAAS;EAClB,CAAC;EAED,MAAMW,OAAO,GAAIV,WAAW,IAAK;IAC/B,IAAIW,cAAc,GAAG,CAACV,QAAQ;IAE9BC,MAAM,CAACC,OAAO,CAACH,WAAW,CAAC,CAACI,OAAO,CAACQ,KAAA,IAAkB;MAAA,IAAjB,CAACN,GAAG,EAAEC,KAAK,CAAC,GAAAK,KAAA;MAC/CL,KAAK,CAACH,OAAO,CAAEI,IAAI,IAAK;QACtB,MAAMvD,WAAW,GAAGuD,IAAI,CAAC,CAAC,CAAC;QAC3B,IAAIvD,WAAW,GAAG0D,cAAc,EAAE;UAChCA,cAAc,GAAG1D,WAAW;QAC9B;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;IACF,OAAO0D,cAAc;EACvB,CAAC;EAED,MAAME,OAAO,GAAIb,WAAW,IAAK;IAC/B,IAAIc,cAAc,GAAG,CAACb,QAAQ;IAE9BC,MAAM,CAACC,OAAO,CAACH,WAAW,CAAC,CAACI,OAAO,CAACW,KAAA,IAAkB;MAAA,IAAjB,CAACT,GAAG,EAAEC,KAAK,CAAC,GAAAQ,KAAA;MAC/CR,KAAK,CAACH,OAAO,CAAEI,IAAI,IAAK;QACtB,MAAMvD,WAAW,GAAGuD,IAAI,CAAC,CAAC,CAAC;QAC3B,IAAIvD,WAAW,GAAG6D,cAAc,EAAE;UAChCA,cAAc,GAAG7D,WAAW;QAC9B;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;IACF,OAAO6D,cAAc;EACvB,CAAC;EAED,MAAME,gBAAgB,GAAIC,MAAM,IAAK;IACnC;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EAAA,CACD;EAED,MAAMC,YAAY,GAAGA,CAAA,KAAM;IACzB7C,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;IACzC;EACF,CAAC;;EAED,MAAM6C,YAAY,GAAGA,CAAA,KAAM;IACzB9C,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;IACzC;EACF,CAAC;;EAED,oBACE1B,OAAA,CAACX,MAAM;IAAAmF,QAAA,eACLxE,OAAA;MAAAwE,QAAA,gBACExE,OAAA;QAAKyE,SAAS,EAAC,WAAW;QAAAD,QAAA,gBACxBxE,OAAA;UAAKyE,SAAS,EAAC,MAAM;UAAAD,QAAA,GAClBtD,WAAW,CAACwD,QAAQ,CAAC,CAAC,CAACtC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,EAC1ClB,WAAW,CAACyD,kBAAkB,CAAC,OAAO,CAAC;QAAA;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACrC,CAAC,eACN/E,OAAA;UAAKyE,SAAS,EAAC,SAAS;UAAAD,QAAA,gBACtBxE,OAAA;YAAAwE,QAAA,EAAKlF,cAAc,CAACyB;UAAQ;YAAA6D,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eAClC/E,OAAA;YAAKyE,SAAS,EAAC,aAAa;YAAAD,QAAA,gBAC1BxE,OAAA;cAAKgF,KAAK,EAAC,MAAM;cAAAR,QAAA,EAAEnE,WAAW,GAAGY;YAAQ;cAAA2D,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC,eAChD/E,OAAA;cAAKgF,KAAK,EAAC,MAAM;cAAAR,QAAA,eACfxE,OAAA;gBAAKiF,GAAG,EAAEhC,OAAO,CAAC1C,MAAM;cAAE;gBAAAqE,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAE;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC1B,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACH,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,eACN/E,OAAA;QAAKgF,KAAK,EAAC,mBAAmB;QAAAR,QAAA,gBAC5BxE,OAAA;UAAQkF,OAAO,EAAEZ,YAAa;UAAAE,QAAA,EAAC;QAA4B;UAAAI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACpE/E,OAAA;UAAQkF,OAAO,EAAE;YAAEX;UAAa,CAAE;UAAAC,QAAA,EAAC;QAA0B;UAAAI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnE,CAAC,EACLX,gBAAgB,CAAC,KAAK,CAAC;IAAA;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjB;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEb;AAAC5E,EAAA,CA3PQF,cAAc;AAAAkF,EAAA,GAAdlF,cAAc;AA6PvB,eAAeA,cAAc;AAAC,IAAAkF,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}